// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AcceleratorSpecInput struct {
	Type         string  `json:"type"`
	Count        int     `json:"count"`
	TpuTfVersion *string `json:"tpuTfVersion"`
}

// GetType returns AcceleratorSpecInput.Type, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetType() string { return v.Type }

// GetCount returns AcceleratorSpecInput.Count, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetCount() int { return v.Count }

// GetTpuTfVersion returns AcceleratorSpecInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetTpuTfVersion() *string { return v.TpuTfVersion }

// nput := CreateProjectGitInput{
// UserID:        &args.UserID,
// ProjectID:     &args.ProjectID,
// EnvironmentID: &args.EnvironmentID,
// Name:          &args.Name,
// Build: &ProjectBuildInput{
// BuildType:      &buildType,
// DockerfilePath: &args.Build.DockerfilePath,
// },
// DeployTarget: &ProjectDeployInput{
// DeployTarget: deployTarget,
// ClusterID:    &args.Deploy.ClusterID,
// },
// Envs: environmentVariablesToRequestInput(args.EnvironmentVariables),
// }
type AppStateFragment struct {
	Id                 string                              `json:"id"`
	Name               string                              `json:"name"`
	Project            *AppStateFragmentProject            `json:"project"`
	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`
	BuildMethod        *AppStateFragmentBuildMethod        `json:"buildMethod"`
	DeployTarget       *DeployTarget                       `json:"deployTarget"`
	Cluster            *AppStateFragmentCluster            `json:"cluster"`
	Envs               []*AppStateFragmentEnvsEnvVar       `json:"envs"`
	Cpu                *string                             `json:"cpu"`
	Memory             *string                             `json:"memory"`
	Owner              *AppStateFragmentOwnerUser          `json:"owner"`
	Enabled            bool                                `json:"enabled"`
	ProductionBranch   *string                             `json:"productionBranch"`
	UpdatedAt          time.Time                           `json:"updatedAt"`
}

// GetId returns AppStateFragment.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetId() string { return v.Id }

// GetName returns AppStateFragment.Name, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetName() string { return v.Name }

// GetProject returns AppStateFragment.Project, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetProject() *AppStateFragmentProject { return v.Project }

// GetProjectEnvironment returns AppStateFragment.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.ProjectEnvironment
}

// GetBuildMethod returns AppStateFragment.BuildMethod, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetBuildMethod() *AppStateFragmentBuildMethod { return v.BuildMethod }

// GetDeployTarget returns AppStateFragment.DeployTarget, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetDeployTarget() *DeployTarget { return v.DeployTarget }

// GetCluster returns AppStateFragment.Cluster, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetCluster() *AppStateFragmentCluster { return v.Cluster }

// GetEnvs returns AppStateFragment.Envs, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetEnvs() []*AppStateFragmentEnvsEnvVar { return v.Envs }

// GetCpu returns AppStateFragment.Cpu, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetCpu() *string { return v.Cpu }

// GetMemory returns AppStateFragment.Memory, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetMemory() *string { return v.Memory }

// GetOwner returns AppStateFragment.Owner, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetOwner() *AppStateFragmentOwnerUser { return v.Owner }

// GetEnabled returns AppStateFragment.Enabled, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetEnabled() bool { return v.Enabled }

// GetProductionBranch returns AppStateFragment.ProductionBranch, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetProductionBranch() *string { return v.ProductionBranch }

// GetUpdatedAt returns AppStateFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AppStateFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// AppStateFragmentBuildMethod includes the requested fields of the GraphQL type BuildMethod.
type AppStateFragmentBuildMethod struct {
	Type           BuildType `json:"type"`
	DockerfilePath *string   `json:"dockerfilePath"`
}

// GetType returns AppStateFragmentBuildMethod.Type, and is useful for accessing the field via an interface.
func (v *AppStateFragmentBuildMethod) GetType() BuildType { return v.Type }

// GetDockerfilePath returns AppStateFragmentBuildMethod.DockerfilePath, and is useful for accessing the field via an interface.
func (v *AppStateFragmentBuildMethod) GetDockerfilePath() *string { return v.DockerfilePath }

// AppStateFragmentCluster includes the requested fields of the GraphQL type Cluster.
type AppStateFragmentCluster struct {
	Id string `json:"id"`
}

// GetId returns AppStateFragmentCluster.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragmentCluster) GetId() string { return v.Id }

// AppStateFragmentEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type AppStateFragmentEnvsEnvVar struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed bool   `json:"sealed"`
}

// GetId returns AppStateFragmentEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragmentEnvsEnvVar) GetId() string { return v.Id }

// GetName returns AppStateFragmentEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *AppStateFragmentEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns AppStateFragmentEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *AppStateFragmentEnvsEnvVar) GetValue() string { return v.Value }

// GetSealed returns AppStateFragmentEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *AppStateFragmentEnvsEnvVar) GetSealed() bool { return v.Sealed }

// AppStateFragmentOwnerUser includes the requested fields of the GraphQL type User.
type AppStateFragmentOwnerUser struct {
	Id string `json:"id"`
}

// GetId returns AppStateFragmentOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragmentOwnerUser) GetId() string { return v.Id }

// AppStateFragmentProject includes the requested fields of the GraphQL type Project.
type AppStateFragmentProject struct {
	Id string `json:"id"`
}

// GetId returns AppStateFragmentProject.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragmentProject) GetId() string { return v.Id }

// AppStateFragmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type AppStateFragmentProjectEnvironment struct {
	Id string `json:"id"`
}

// GetId returns AppStateFragmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *AppStateFragmentProjectEnvironment) GetId() string { return v.Id }

type AutoscalingInput struct {
	MinReplicas          int                        `json:"minReplicas"`
	MaxReplicas          int                        `json:"maxReplicas"`
	CoolDownPeriod       *int                       `json:"coolDownPeriod"`
	Triggers             []*AutoscalingTriggerInput `json:"triggers,omitempty"`
	KedaScaledObjectSpec *string                    `json:"kedaScaledObjectSpec"`
}

// GetMinReplicas returns AutoscalingInput.MinReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns AutoscalingInput.MaxReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns AutoscalingInput.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetCoolDownPeriod() *int { return v.CoolDownPeriod }

// GetTriggers returns AutoscalingInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetTriggers() []*AutoscalingTriggerInput { return v.Triggers }

// GetKedaScaledObjectSpec returns AutoscalingInput.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetKedaScaledObjectSpec() *string { return v.KedaScaledObjectSpec }

type AutoscalingTriggerInput struct {
	Type AutoscalingType `json:"type"`
	Spec string          `json:"spec"`
}

// GetType returns AutoscalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetType() AutoscalingType { return v.Type }

// GetSpec returns AutoscalingTriggerInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetSpec() string { return v.Spec }

type AutoscalingType string

const (
	AutoscalingTypeCpu        AutoscalingType = "CPU"
	AutoscalingTypeMemory     AutoscalingType = "MEMORY"
	AutoscalingTypePrometheus AutoscalingType = "PROMETHEUS"
	AutoscalingTypeCustom     AutoscalingType = "CUSTOM"
)

type BuildTarget string

const (
	BuildTargetNullRegistry      BuildTarget = "NULL_REGISTRY"
	BuildTargetClusterRegistry   BuildTarget = "CLUSTER_REGISTRY"
	BuildTargetContainerRegistry BuildTarget = "CONTAINER_REGISTRY"
)

type BuildTargetInput struct {
	BuildTarget BuildTarget `json:"buildTarget"`
	ClusterID   *string     `json:"clusterID"`
}

// GetBuildTarget returns BuildTargetInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetBuildTarget() BuildTarget { return v.BuildTarget }

// GetClusterID returns BuildTargetInput.ClusterID, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetClusterID() *string { return v.ClusterID }

type BuildType string

const (
	BuildTypeDocker        BuildType = "DOCKER"
	BuildTypeBuildpacks    BuildType = "BUILDPACKS"
	BuildTypePython        BuildType = "PYTHON"
	BuildTypePythonDjango  BuildType = "PYTHON_DJANGO"
	BuildTypeNode          BuildType = "NODE"
	BuildTypeNodeStatic    BuildType = "NODE_STATIC"
	BuildTypeNodeNextjs    BuildType = "NODE_NEXTJS"
	BuildTypeUbuntu        BuildType = "UBUNTU"
	BuildTypeElixirPhoenix BuildType = "ELIXIR_PHOENIX"
	BuildTypeGolangModules BuildType = "GOLANG_MODULES"
	BuildTypeHerokuish     BuildType = "HEROKUISH"
)

type ContainerResourcesSpecInput struct {
	Cpu              float64               `json:"cpu"`
	Memory           float64               `json:"memory"`
	EphemeralStorage *float64              `json:"ephemeralStorage"`
	Accelerator      *AcceleratorSpecInput `json:"accelerator,omitempty"`
	Spot             *bool                 `json:"spot"`
}

// GetCpu returns ContainerResourcesSpecInput.Cpu, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetCpu() float64 { return v.Cpu }

// GetMemory returns ContainerResourcesSpecInput.Memory, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetMemory() float64 { return v.Memory }

// GetEphemeralStorage returns ContainerResourcesSpecInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetAccelerator returns ContainerResourcesSpecInput.Accelerator, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetAccelerator() *AcceleratorSpecInput { return v.Accelerator }

// GetSpot returns ContainerResourcesSpecInput.Spot, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetSpot() *bool { return v.Spot }

type CreateProjectDockerInput struct {
	UserID          *string             `json:"userID"`
	Name            *string             `json:"name"`
	ProjectID       *string             `json:"projectID"`
	EnvironmentID   *string             `json:"environmentID"`
	ProjectName     *string             `json:"projectName"`
	EnvironmentName *string             `json:"environmentName"`
	DeployTarget    *ProjectDeployInput `json:"deployTarget,omitempty"`
	DockerImage     string              `json:"dockerImage"`
	Envs            []*EnvVarInput      `json:"envs,omitempty"`
	Ports           *string             `json:"ports"`
	Replication     []*ReplicationInput `json:"replication,omitempty"`
	Volumes         *string             `json:"volumes"`
	Cpu             *string             `json:"cpu"`
	Memory          *string             `json:"memory"`
	Dedicated       *bool               `json:"dedicated"`
	Gpu             *string             `json:"gpu"`
	Enabled         *bool               `json:"enabled"`
	TeamID          *string             `json:"teamID"`
}

// GetUserID returns CreateProjectDockerInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetUserID() *string { return v.UserID }

// GetName returns CreateProjectDockerInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectDockerInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetProjectID() *string { return v.ProjectID }

// GetEnvironmentID returns CreateProjectDockerInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvironmentID() *string { return v.EnvironmentID }

// GetProjectName returns CreateProjectDockerInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectDockerInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetDeployTarget returns CreateProjectDockerInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetDockerImage returns CreateProjectDockerInput.DockerImage, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDockerImage() string { return v.DockerImage }

// GetEnvs returns CreateProjectDockerInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvs() []*EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectDockerInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetPorts() *string { return v.Ports }

// GetReplication returns CreateProjectDockerInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetReplication() []*ReplicationInput { return v.Replication }

// GetVolumes returns CreateProjectDockerInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetVolumes() *string { return v.Volumes }

// GetCpu returns CreateProjectDockerInput.Cpu, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetCpu() *string { return v.Cpu }

// GetMemory returns CreateProjectDockerInput.Memory, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetMemory() *string { return v.Memory }

// GetDedicated returns CreateProjectDockerInput.Dedicated, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDedicated() *bool { return v.Dedicated }

// GetGpu returns CreateProjectDockerInput.Gpu, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetGpu() *string { return v.Gpu }

// GetEnabled returns CreateProjectDockerInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnabled() *bool { return v.Enabled }

// GetTeamID returns CreateProjectDockerInput.TeamID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetTeamID() *string { return v.TeamID }

type CreateProjectGitInput struct {
	UserID                        *string                      `json:"userID"`
	Name                          *string                      `json:"name"`
	ProjectID                     *string                      `json:"projectID"`
	EnvironmentID                 *string                      `json:"environmentID"`
	ProjectName                   *string                      `json:"projectName"`
	EnvironmentName               *string                      `json:"environmentName"`
	Url                           string                       `json:"url"`
	ProductionBranch              *string                      `json:"productionBranch"`
	BuildTarget                   *BuildTargetInput            `json:"buildTarget,omitempty"`
	DeployTarget                  *ProjectDeployInput          `json:"deployTarget,omitempty"`
	Build                         *ProjectBuildInput           `json:"build,omitempty"`
	DeployService                 *bool                        `json:"deployService"`
	DeployJob                     *bool                        `json:"deployJob"`
	ManualDeploy                  *bool                        `json:"manualDeploy"`
	AutoRetry                     *bool                        `json:"autoRetry"`
	AutoRollback                  *bool                        `json:"autoRollback"`
	DeployBranch                  *bool                        `json:"deployBranch"`
	BranchIgnore                  *string                      `json:"branchIgnore"`
	ContainerRepository           *string                      `json:"containerRepository"`
	ContainerCacheRepository      *string                      `json:"containerCacheRepository"`
	ContainerRegistryID           *string                      `json:"containerRegistryID"`
	Resources                     *ContainerResourcesSpecInput `json:"resources,omitempty"`
	BuildResources                *ContainerResourcesSpecInput `json:"buildResources,omitempty"`
	BranchResources               *ContainerResourcesSpecInput `json:"branchResources,omitempty"`
	Envs                          []*EnvVarInput               `json:"envs,omitempty"`
	Ports                         []*PortInput                 `json:"ports,omitempty"`
	Volumes                       []*VolumeInput               `json:"volumes,omitempty"`
	Replication                   []*ReplicationInput          `json:"replication,omitempty"`
	RunCommand                    *string                      `json:"runCommand"`
	LogShipper                    *LogShipperInput             `json:"logShipper,omitempty"`
	DeployStrategy                *DeployStrategy              `json:"deployStrategy"`
	Autoscaling                   *AutoscalingInput            `json:"autoscaling,omitempty"`
	PreStopSleep                  *int                         `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                         `json:"terminationGracePeriodSeconds"`
	PrometheusScrape              *PrometheusScrapeInput       `json:"prometheusScrape,omitempty"`
	ReadinessProbe                *ProbeInput                  `json:"readinessProbe,omitempty"`
	LivenessProbe                 *ProbeInput                  `json:"livenessProbe,omitempty"`
	StartupProbe                  *ProbeInput                  `json:"startupProbe,omitempty"`
	ClusterIssuerName             *string                      `json:"clusterIssuerName"`
	HostNetwork                   *bool                        `json:"hostNetwork"`
	StaticIP                      *bool                        `json:"staticIP"`
	NodeSelector                  *string                      `json:"nodeSelector"`
	NoBuildCache                  *bool                        `json:"noBuildCache"`
	KanikoFlags                   *KanikoFlagsInput            `json:"kanikoFlags,omitempty"`
	DatadogApmEnabled             *bool                        `json:"datadogApmEnabled"`
	Enabled                       *bool                        `json:"enabled"`
	PipelineClusterID             *string                      `json:"pipelineClusterID"`
	Path                          *string                      `json:"path"`
}

// GetUserID returns CreateProjectGitInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUserID() *string { return v.UserID }

// GetName returns CreateProjectGitInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectGitInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectID() *string { return v.ProjectID }

// GetEnvironmentID returns CreateProjectGitInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentID() *string { return v.EnvironmentID }

// GetProjectName returns CreateProjectGitInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectGitInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetUrl returns CreateProjectGitInput.Url, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUrl() string { return v.Url }

// GetProductionBranch returns CreateProjectGitInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetBuildTarget returns CreateProjectGitInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildTarget() *BuildTargetInput { return v.BuildTarget }

// GetDeployTarget returns CreateProjectGitInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetBuild returns CreateProjectGitInput.Build, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuild() *ProjectBuildInput { return v.Build }

// GetDeployService returns CreateProjectGitInput.DeployService, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns CreateProjectGitInput.DeployJob, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployJob() *bool { return v.DeployJob }

// GetManualDeploy returns CreateProjectGitInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns CreateProjectGitInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns CreateProjectGitInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployBranch returns CreateProjectGitInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns CreateProjectGitInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetContainerRepository returns CreateProjectGitInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns CreateProjectGitInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerCacheRepository() *string {
	return v.ContainerCacheRepository
}

// GetContainerRegistryID returns CreateProjectGitInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRegistryID() *string { return v.ContainerRegistryID }

// GetResources returns CreateProjectGitInput.Resources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns CreateProjectGitInput.BuildResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns CreateProjectGitInput.BranchResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetEnvs returns CreateProjectGitInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvs() []*EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectGitInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPorts() []*PortInput { return v.Ports }

// GetVolumes returns CreateProjectGitInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetVolumes() []*VolumeInput { return v.Volumes }

// GetReplication returns CreateProjectGitInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReplication() []*ReplicationInput { return v.Replication }

// GetRunCommand returns CreateProjectGitInput.RunCommand, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetRunCommand() *string { return v.RunCommand }

// GetLogShipper returns CreateProjectGitInput.LogShipper, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDeployStrategy returns CreateProjectGitInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetAutoscaling returns CreateProjectGitInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetPreStopSleep returns CreateProjectGitInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns CreateProjectGitInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetPrometheusScrape returns CreateProjectGitInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPrometheusScrape() *PrometheusScrapeInput {
	return v.PrometheusScrape
}

// GetReadinessProbe returns CreateProjectGitInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns CreateProjectGitInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns CreateProjectGitInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetClusterIssuerName returns CreateProjectGitInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// GetHostNetwork returns CreateProjectGitInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns CreateProjectGitInput.StaticIP, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStaticIP() *bool { return v.StaticIP }

// GetNodeSelector returns CreateProjectGitInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNodeSelector() *string { return v.NodeSelector }

// GetNoBuildCache returns CreateProjectGitInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetKanikoFlags returns CreateProjectGitInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetDatadogApmEnabled returns CreateProjectGitInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetEnabled returns CreateProjectGitInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnabled() *bool { return v.Enabled }

// GetPipelineClusterID returns CreateProjectGitInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPipelineClusterID() *string { return v.PipelineClusterID }

// GetPath returns CreateProjectGitInput.Path, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPath() *string { return v.Path }

type DatadogLogIntegrationInput struct {
	Key  string  `json:"key"`
	Host *string `json:"host"`
}

// GetKey returns DatadogLogIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetKey() string { return v.Key }

// GetHost returns DatadogLogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetHost() *string { return v.Host }

type DeployRuntime string

const (
	DeployRuntimeAwsLambda   DeployRuntime = "AWS_LAMBDA"
	DeployRuntimeAwsEcs      DeployRuntime = "AWS_ECS"
	DeployRuntimeGcpCloudRun DeployRuntime = "GCP_CLOUD_RUN"
	DeployRuntimeKubernetes  DeployRuntime = "KUBERNETES"
	DeployRuntimeKnative     DeployRuntime = "KNATIVE"
)

type DeployStrategy string

const (
	DeployStrategyRestart   DeployStrategy = "RESTART"
	DeployStrategyRolling   DeployStrategy = "ROLLING"
	DeployStrategyCanary    DeployStrategy = "CANARY"
	DeployStrategyBlueGreen DeployStrategy = "BLUE_GREEN"
	DeployStrategyRedBlack  DeployStrategy = "RED_BLACK"
)

type DeployTarget string

const (
	DeployTargetKubernetes        DeployTarget = "KUBERNETES"
	DeployTargetServerless        DeployTarget = "SERVERLESS"
	DeployTargetTerraform         DeployTarget = "TERRAFORM"
	DeployTargetPulumi            DeployTarget = "PULUMI"
	DeployTargetAwsSam            DeployTarget = "AWS_SAM"
	DeployTargetAwsCdk            DeployTarget = "AWS_CDK"
	DeployTargetAwsCloudformation DeployTarget = "AWS_CLOUDFORMATION"
	DeployTargetGcpCloudRun       DeployTarget = "GCP_CLOUD_RUN"
)

type DeployType string

const (
	DeployTypeKubernetes DeployType = "KUBERNETES"
	DeployTypeKnative    DeployType = "KNATIVE"
	DeployTypeHelm       DeployType = "HELM"
	DeployTypeKubectl    DeployType = "KUBECTL"
)

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed *bool  `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() *bool { return v.Sealed }

// ## Environment ###
type EnvironmentStateFragment struct {
	Id        string                           `json:"id"`
	Name      string                           `json:"name"`
	Project   *EnvironmentStateFragmentProject `json:"project"`
	UpdatedAt time.Time                        `json:"updatedAt"`
}

// GetId returns EnvironmentStateFragment.Id, and is useful for accessing the field via an interface.
func (v *EnvironmentStateFragment) GetId() string { return v.Id }

// GetName returns EnvironmentStateFragment.Name, and is useful for accessing the field via an interface.
func (v *EnvironmentStateFragment) GetName() string { return v.Name }

// GetProject returns EnvironmentStateFragment.Project, and is useful for accessing the field via an interface.
func (v *EnvironmentStateFragment) GetProject() *EnvironmentStateFragmentProject { return v.Project }

// GetUpdatedAt returns EnvironmentStateFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *EnvironmentStateFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// EnvironmentStateFragmentProject includes the requested fields of the GraphQL type Project.
type EnvironmentStateFragmentProject struct {
	Id string `json:"id"`
}

// GetId returns EnvironmentStateFragmentProject.Id, and is useful for accessing the field via an interface.
func (v *EnvironmentStateFragmentProject) GetId() string { return v.Id }

type GPUInput struct {
	Type  *string `json:"type"`
	Count int     `json:"count"`
}

// GetType returns GPUInput.Type, and is useful for accessing the field via an interface.
func (v *GPUInput) GetType() *string { return v.Type }

// GetCount returns GPUInput.Count, and is useful for accessing the field via an interface.
func (v *GPUInput) GetCount() int { return v.Count }

type GitHubRepoIntegrationInput struct {
	GithubConnectionID  *int    `json:"githubConnectionID"`
	GithubOwner         *string `json:"githubOwner"`
	GithubName          *string `json:"githubName"`
	AutoDeployBranch    *bool   `json:"autoDeployBranch"`
	AutoStopBranch      *bool   `json:"autoStopBranch"`
	AutoStopPullRequest *bool   `json:"autoStopPullRequest"`
	BranchIgnore        *string `json:"branchIgnore"`
	BranchStopIgnore    *string `json:"branchStopIgnore"`
}

// GetGithubConnectionID returns GitHubRepoIntegrationInput.GithubConnectionID, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubConnectionID() *int { return v.GithubConnectionID }

// GetGithubOwner returns GitHubRepoIntegrationInput.GithubOwner, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubOwner() *string { return v.GithubOwner }

// GetGithubName returns GitHubRepoIntegrationInput.GithubName, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubName() *string { return v.GithubName }

// GetAutoDeployBranch returns GitHubRepoIntegrationInput.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoDeployBranch() *bool { return v.AutoDeployBranch }

// GetAutoStopBranch returns GitHubRepoIntegrationInput.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoStopBranch() *bool { return v.AutoStopBranch }

// GetAutoStopPullRequest returns GitHubRepoIntegrationInput.AutoStopPullRequest, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoStopPullRequest() *bool { return v.AutoStopPullRequest }

// GetBranchIgnore returns GitHubRepoIntegrationInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetBranchStopIgnore returns GitHubRepoIntegrationInput.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetBranchStopIgnore() *string { return v.BranchStopIgnore }

type GitlabConnectionInput struct {
	GitlabIntegrationID string  `json:"gitlabIntegrationID"`
	ProjectPath         *string `json:"projectPath"`
}

// GetGitlabIntegrationID returns GitlabConnectionInput.GitlabIntegrationID, and is useful for accessing the field via an interface.
func (v *GitlabConnectionInput) GetGitlabIntegrationID() string { return v.GitlabIntegrationID }

// GetProjectPath returns GitlabConnectionInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *GitlabConnectionInput) GetProjectPath() *string { return v.ProjectPath }

type GitlabRepoIntegrationInput struct {
	GitlabConnection    *GitlabConnectionInput `json:"gitlabConnection,omitempty"`
	AutoDeployBranch    *bool                  `json:"autoDeployBranch"`
	AutoStopBranch      *bool                  `json:"autoStopBranch"`
	AutoStopPullRequest *bool                  `json:"autoStopPullRequest"`
	BranchIgnore        *string                `json:"branchIgnore"`
	BranchStopIgnore    *string                `json:"branchStopIgnore"`
}

// GetGitlabConnection returns GitlabRepoIntegrationInput.GitlabConnection, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetGitlabConnection() *GitlabConnectionInput {
	return v.GitlabConnection
}

// GetAutoDeployBranch returns GitlabRepoIntegrationInput.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoDeployBranch() *bool { return v.AutoDeployBranch }

// GetAutoStopBranch returns GitlabRepoIntegrationInput.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoStopBranch() *bool { return v.AutoStopBranch }

// GetAutoStopPullRequest returns GitlabRepoIntegrationInput.AutoStopPullRequest, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoStopPullRequest() *bool { return v.AutoStopPullRequest }

// GetBranchIgnore returns GitlabRepoIntegrationInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetBranchStopIgnore returns GitlabRepoIntegrationInput.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetBranchStopIgnore() *string { return v.BranchStopIgnore }

type KanikoFlagsInput struct {
	CompressedCaching *bool `json:"compressedCaching"`
}

// GetCompressedCaching returns KanikoFlagsInput.CompressedCaching, and is useful for accessing the field via an interface.
func (v *KanikoFlagsInput) GetCompressedCaching() *bool { return v.CompressedCaching }

type KubernetesCustomizationInput struct {
	NodeSelector       *string `json:"nodeSelector"`
	HostNetwork        *bool   `json:"hostNetwork"`
	PodSpecPatch       *string `json:"podSpecPatch"`
	PodAnnotations     *string `json:"podAnnotations"`
	ServiceAnnotations *string `json:"serviceAnnotations"`
	IngressAnnotations *string `json:"ingressAnnotations"`
	ClusterIssuerName  *string `json:"clusterIssuerName"`
}

// GetNodeSelector returns KubernetesCustomizationInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetNodeSelector() *string { return v.NodeSelector }

// GetHostNetwork returns KubernetesCustomizationInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetPodSpecPatch returns KubernetesCustomizationInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetPodSpecPatch() *string { return v.PodSpecPatch }

// GetPodAnnotations returns KubernetesCustomizationInput.PodAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetPodAnnotations() *string { return v.PodAnnotations }

// GetServiceAnnotations returns KubernetesCustomizationInput.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetServiceAnnotations() *string { return v.ServiceAnnotations }

// GetIngressAnnotations returns KubernetesCustomizationInput.IngressAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetIngressAnnotations() *string { return v.IngressAnnotations }

// GetClusterIssuerName returns KubernetesCustomizationInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

type KubernetesSecretMountInput struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
}

// GetSecretName returns KubernetesSecretMountInput.SecretName, and is useful for accessing the field via an interface.
func (v *KubernetesSecretMountInput) GetSecretName() string { return v.SecretName }

// GetMountPath returns KubernetesSecretMountInput.MountPath, and is useful for accessing the field via an interface.
func (v *KubernetesSecretMountInput) GetMountPath() string { return v.MountPath }

type LogDNAIntegrationInput struct {
	Key string `json:"key"`
}

// GetKey returns LogDNAIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *LogDNAIntegrationInput) GetKey() string { return v.Key }

type LogShipperInput struct {
	Type    *LogShipperType             `json:"type"`
	Logz    *LogzIntegrationInput       `json:"logz,omitempty"`
	Syslog  *SyslogIntegrationInput     `json:"syslog,omitempty"`
	LogDNA  *LogDNAIntegrationInput     `json:"logDNA,omitempty"`
	Datadog *DatadogLogIntegrationInput `json:"datadog,omitempty"`
}

// GetType returns LogShipperInput.Type, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetType() *LogShipperType { return v.Type }

// GetLogz returns LogShipperInput.Logz, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogz() *LogzIntegrationInput { return v.Logz }

// GetSyslog returns LogShipperInput.Syslog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetSyslog() *SyslogIntegrationInput { return v.Syslog }

// GetLogDNA returns LogShipperInput.LogDNA, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogDNA() *LogDNAIntegrationInput { return v.LogDNA }

// GetDatadog returns LogShipperInput.Datadog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetDatadog() *DatadogLogIntegrationInput { return v.Datadog }

type LogShipperType string

const (
	LogShipperTypeLogzio  LogShipperType = "LOGZIO"
	LogShipperTypeSyslog  LogShipperType = "SYSLOG"
	LogShipperTypeLogdna  LogShipperType = "LOGDNA"
	LogShipperTypeDatadog LogShipperType = "DATADOG"
)

type LogzIntegrationInput struct {
	Token string `json:"token"`
	Url   string `json:"url"`
}

// GetToken returns LogzIntegrationInput.Token, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetToken() string { return v.Token }

// GetUrl returns LogzIntegrationInput.Url, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetUrl() string { return v.Url }

type PortInput struct {
	Port     string       `json:"port"`
	Protocol PortProtocol `json:"protocol"`
	Public   bool         `json:"public"`
	Https    bool         `json:"https"`
	Grpc     *bool        `json:"grpc"`
}

// GetPort returns PortInput.Port, and is useful for accessing the field via an interface.
func (v *PortInput) GetPort() string { return v.Port }

// GetProtocol returns PortInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortInput) GetProtocol() PortProtocol { return v.Protocol }

// GetPublic returns PortInput.Public, and is useful for accessing the field via an interface.
func (v *PortInput) GetPublic() bool { return v.Public }

// GetHttps returns PortInput.Https, and is useful for accessing the field via an interface.
func (v *PortInput) GetHttps() bool { return v.Https }

// GetGrpc returns PortInput.Grpc, and is useful for accessing the field via an interface.
func (v *PortInput) GetGrpc() *bool { return v.Grpc }

type PortProtocol string

const (
	PortProtocolTcp PortProtocol = "tcp"
	PortProtocolUdp PortProtocol = "udp"
)

type ProbeInput struct {
	Command             *string `json:"command"`
	HttpEndpoint        *string `json:"httpEndpoint"`
	TcpEndpoint         *string `json:"tcpEndpoint"`
	InitialDelaySeconds *int    `json:"initialDelaySeconds"`
	PeriodSeconds       *int    `json:"periodSeconds"`
	SuccessThreshold    *int    `json:"successThreshold"`
	FailureThreshold    *int    `json:"failureThreshold"`
	TimeoutSeconds      *int    `json:"timeoutSeconds"`
}

// GetCommand returns ProbeInput.Command, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetCommand() *string { return v.Command }

// GetHttpEndpoint returns ProbeInput.HttpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetHttpEndpoint() *string { return v.HttpEndpoint }

// GetTcpEndpoint returns ProbeInput.TcpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTcpEndpoint() *string { return v.TcpEndpoint }

// GetInitialDelaySeconds returns ProbeInput.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetInitialDelaySeconds() *int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeInput.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetPeriodSeconds() *int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeInput.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetSuccessThreshold() *int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeInput.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetFailureThreshold() *int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTimeoutSeconds() *int { return v.TimeoutSeconds }

type ProjectBuildInput struct {
	BuildType        *BuildType `json:"buildType"`
	DockerfilePath   *string    `json:"dockerfilePath"`
	WorkingDirectory *string    `json:"workingDirectory"`
	BuildCommand     *string    `json:"buildCommand"`
	RunCommand       *string    `json:"runCommand"`
	StaticPath       *string    `json:"staticPath"`
	NodejsVersion    *string    `json:"nodejsVersion"`
	PythonVersion    *string    `json:"pythonVersion"`
	GolangVersion    *string    `json:"golangVersion"`
}

// GetBuildType returns ProjectBuildInput.BuildType, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildType() *BuildType { return v.BuildType }

// GetDockerfilePath returns ProjectBuildInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetWorkingDirectory returns ProjectBuildInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns ProjectBuildInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildCommand() *string { return v.BuildCommand }

// GetRunCommand returns ProjectBuildInput.RunCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns ProjectBuildInput.StaticPath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetStaticPath() *string { return v.StaticPath }

// GetNodejsVersion returns ProjectBuildInput.NodejsVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns ProjectBuildInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns ProjectBuildInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetGolangVersion() *string { return v.GolangVersion }

type ProjectDeployInput struct {
	DeployTarget    DeployTarget   `json:"deployTarget"`
	DeployType      *DeployType    `json:"deployType"`
	DeployRuntime   *DeployRuntime `json:"deployRuntime"`
	AwsAccountID    *string        `json:"awsAccountID"`
	GcpAccountID    *string        `json:"gcpAccountID"`
	DoAccountID     *string        `json:"doAccountID"`
	LinodeAccountID *string        `json:"linodeAccountID"`
	ClusterID       *string        `json:"clusterID"`
	Region          *string        `json:"region"`
}

// GetDeployTarget returns ProjectDeployInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployTarget() DeployTarget { return v.DeployTarget }

// GetDeployType returns ProjectDeployInput.DeployType, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployType() *DeployType { return v.DeployType }

// GetDeployRuntime returns ProjectDeployInput.DeployRuntime, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployRuntime() *DeployRuntime { return v.DeployRuntime }

// GetAwsAccountID returns ProjectDeployInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetAwsAccountID() *string { return v.AwsAccountID }

// GetGcpAccountID returns ProjectDeployInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetGcpAccountID() *string { return v.GcpAccountID }

// GetDoAccountID returns ProjectDeployInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDoAccountID() *string { return v.DoAccountID }

// GetLinodeAccountID returns ProjectDeployInput.LinodeAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetLinodeAccountID() *string { return v.LinodeAccountID }

// GetClusterID returns ProjectDeployInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetClusterID() *string { return v.ClusterID }

// GetRegion returns ProjectDeployInput.Region, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetRegion() *string { return v.Region }

// ProjectStateFragment includes the GraphQL fields of Project requested by the fragment ProjectStateFragment.
type ProjectStateFragment struct {
	Id           string                                                `json:"id"`
	Name         string                                                `json:"name"`
	UpdatedAt    time.Time                                             `json:"updatedAt"`
	Environments []*ProjectStateFragmentEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns ProjectStateFragment.Id, and is useful for accessing the field via an interface.
func (v *ProjectStateFragment) GetId() string { return v.Id }

// GetName returns ProjectStateFragment.Name, and is useful for accessing the field via an interface.
func (v *ProjectStateFragment) GetName() string { return v.Name }

// GetUpdatedAt returns ProjectStateFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectStateFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetEnvironments returns ProjectStateFragment.Environments, and is useful for accessing the field via an interface.
func (v *ProjectStateFragment) GetEnvironments() []*ProjectStateFragmentEnvironmentsProjectEnvironment {
	return v.Environments
}

// ProjectStateFragmentEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectStateFragmentEnvironmentsProjectEnvironment struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns ProjectStateFragmentEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectStateFragmentEnvironmentsProjectEnvironment) GetId() string { return v.Id }

// GetName returns ProjectStateFragmentEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectStateFragmentEnvironmentsProjectEnvironment) GetName() string { return v.Name }

// GetUpdatedAt returns ProjectStateFragmentEnvironmentsProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectStateFragmentEnvironmentsProjectEnvironment) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

type PrometheusScrapeInput struct {
	Path string `json:"path"`
	Port int    `json:"port"`
}

// GetPath returns PrometheusScrapeInput.Path, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPath() string { return v.Path }

// GetPort returns PrometheusScrapeInput.Port, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPort() int { return v.Port }

type ReplicationInput struct {
	Region    string  `json:"region"`
	Replicas  int     `json:"replicas"`
	ClusterID *string `json:"clusterID"`
}

// GetRegion returns ReplicationInput.Region, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetRegion() string { return v.Region }

// GetReplicas returns ReplicationInput.Replicas, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetReplicas() int { return v.Replicas }

// GetClusterID returns ReplicationInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetClusterID() *string { return v.ClusterID }

type ServerlessResourcesSpecInput struct {
	Cpu    *float64 `json:"cpu"`
	Memory float64  `json:"memory"`
}

// GetCpu returns ServerlessResourcesSpecInput.Cpu, and is useful for accessing the field via an interface.
func (v *ServerlessResourcesSpecInput) GetCpu() *float64 { return v.Cpu }

// GetMemory returns ServerlessResourcesSpecInput.Memory, and is useful for accessing the field via an interface.
func (v *ServerlessResourcesSpecInput) GetMemory() float64 { return v.Memory }

type SyslogIntegrationInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Mode string `json:"mode"`
}

// GetHost returns SyslogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetHost() string { return v.Host }

// GetPort returns SyslogIntegrationInput.Port, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetPort() string { return v.Port }

// GetMode returns SyslogIntegrationInput.Mode, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetMode() string { return v.Mode }

type TPUInput struct {
	Type      string `json:"type"`
	Cores     int    `json:"cores"`
	TfVersion string `json:"tfVersion"`
}

// GetType returns TPUInput.Type, and is useful for accessing the field via an interface.
func (v *TPUInput) GetType() string { return v.Type }

// GetCores returns TPUInput.Cores, and is useful for accessing the field via an interface.
func (v *TPUInput) GetCores() int { return v.Cores }

// GetTfVersion returns TPUInput.TfVersion, and is useful for accessing the field via an interface.
func (v *TPUInput) GetTfVersion() string { return v.TfVersion }

type UpdateProjectInput struct {
	Id                            string                        `json:"id"`
	Path                          *string                       `json:"path"`
	Name                          *string                       `json:"name"`
	DockerImage                   *string                       `json:"dockerImage"`
	GithubIntegration             *GitHubRepoIntegrationInput   `json:"githubIntegration,omitempty"`
	GitlabIntegration             *GitlabRepoIntegrationInput   `json:"gitlabIntegration,omitempty"`
	BuildType                     *string                       `json:"buildType"`
	DockerfilePath                *string                       `json:"dockerfilePath"`
	DockerfileText                *string                       `json:"dockerfileText"`
	WorkingDirectory              *string                       `json:"workingDirectory"`
	BuildCommand                  *string                       `json:"buildCommand"`
	RunCommand                    *string                       `json:"runCommand"`
	StaticPath                    *string                       `json:"staticPath"`
	ReleaseCommand                *string                       `json:"releaseCommand"`
	NodejsVersion                 *string                       `json:"nodejsVersion"`
	PythonVersion                 *string                       `json:"pythonVersion"`
	GolangVersion                 *string                       `json:"golangVersion"`
	NoBuildCache                  *bool                         `json:"noBuildCache"`
	KanikoFlags                   *KanikoFlagsInput             `json:"kanikoFlags,omitempty"`
	Volumes                       *string                       `json:"volumes"`
	Ports                         *string                       `json:"ports"`
	Replication                   []*ReplicationInput           `json:"replication,omitempty"`
	Resources                     *ContainerResourcesSpecInput  `json:"resources,omitempty"`
	BuildResources                *ContainerResourcesSpecInput  `json:"buildResources,omitempty"`
	BranchResources               *ContainerResourcesSpecInput  `json:"branchResources,omitempty"`
	ServerlessResources           *ServerlessResourcesSpecInput `json:"serverlessResources,omitempty"`
	ReadinessProbe                *ProbeInput                   `json:"readinessProbe,omitempty"`
	LivenessProbe                 *ProbeInput                   `json:"livenessProbe,omitempty"`
	StartupProbe                  *ProbeInput                   `json:"startupProbe,omitempty"`
	Autoscaling                   *AutoscalingInput             `json:"autoscaling,omitempty"`
	PreStopSleep                  *int                          `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                          `json:"terminationGracePeriodSeconds"`
	PrometheusScrape              *PrometheusScrapeInput        `json:"prometheusScrape,omitempty"`
	HostNetwork                   *bool                         `json:"hostNetwork"`
	StaticIP                      *bool                         `json:"staticIP"`
	IamPolicies                   []string                      `json:"iamPolicies"`
	ManualDeploy                  *bool                         `json:"manualDeploy"`
	AutoRetry                     *bool                         `json:"autoRetry"`
	AutoRollback                  *bool                         `json:"autoRollback"`
	DeployStrategy                *DeployStrategy               `json:"deployStrategy"`
	HelmVersion                   *string                       `json:"helmVersion"`
	HelmValues                    *string                       `json:"helmValues"`
	TerraformVersion              *string                       `json:"terraformVersion"`
	TerraformVariables            *string                       `json:"terraformVariables"`
	Manifests                     []string                      `json:"manifests"`
	ManifestValue                 *string                       `json:"manifestValue"`
	AwsIamRole                    *string                       `json:"awsIamRole"`
	GcpServiceAccount             *string                       `json:"gcpServiceAccount"`
	ClusterIssuerName             *string                       `json:"clusterIssuerName"`
	LogShipper                    *LogShipperInput              `json:"logShipper,omitempty"`
	DeployService                 *bool                         `json:"deployService"`
	DeployJob                     *bool                         `json:"deployJob"`
	CronJobSchedule               *string                       `json:"cronJobSchedule"`
	ProductionBranch              *string                       `json:"productionBranch"`
	ContainerRepository           *string                       `json:"containerRepository"`
	ContainerCacheRepository      *string                       `json:"containerCacheRepository"`
	ContainerRegistryID           *string                       `json:"containerRegistryID"`
	NodeSelector                  *string                       `json:"nodeSelector"`
	SecretMounts                  []*KubernetesSecretMountInput `json:"secretMounts,omitempty"`
	KubernetesCustomization       *KubernetesCustomizationInput `json:"kubernetesCustomization,omitempty"`
	BuildCPU                      *float64                      `json:"buildCPU"`
	BuildMemory                   *float64                      `json:"buildMemory"`
	Cpu                           *string                       `json:"cpu"`
	Memory                        *string                       `json:"memory"`
	EphemeralStorage              *float64                      `json:"ephemeralStorage"`
	Gpu                           *GPUInput                     `json:"gpu,omitempty"`
	Tpu                           *TPUInput                     `json:"tpu,omitempty"`
	Dedicated                     *bool                         `json:"dedicated"`
	GithubInstallationID          *string                       `json:"githubInstallationID"`
	GithubRepository              *string                       `json:"githubRepository"`
	DeployBranch                  *bool                         `json:"deployBranch"`
	BranchIgnore                  *string                       `json:"branchIgnore"`
	DatadogApmEnabled             *bool                         `json:"datadogApmEnabled"`
	PipelineClusterID             *string                       `json:"pipelineClusterID"`
	DeployTarget                  *ProjectDeployInput           `json:"deployTarget,omitempty"`
}

// GetId returns UpdateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetId() string { return v.Id }

// GetPath returns UpdateProjectInput.Path, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPath() *string { return v.Path }

// GetName returns UpdateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetName() *string { return v.Name }

// GetDockerImage returns UpdateProjectInput.DockerImage, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerImage() *string { return v.DockerImage }

// GetGithubIntegration returns UpdateProjectInput.GithubIntegration, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubIntegration() *GitHubRepoIntegrationInput {
	return v.GithubIntegration
}

// GetGitlabIntegration returns UpdateProjectInput.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGitlabIntegration() *GitlabRepoIntegrationInput {
	return v.GitlabIntegration
}

// GetBuildType returns UpdateProjectInput.BuildType, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildType() *string { return v.BuildType }

// GetDockerfilePath returns UpdateProjectInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetDockerfileText returns UpdateProjectInput.DockerfileText, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerfileText() *string { return v.DockerfileText }

// GetWorkingDirectory returns UpdateProjectInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns UpdateProjectInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildCommand() *string { return v.BuildCommand }

// GetRunCommand returns UpdateProjectInput.RunCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns UpdateProjectInput.StaticPath, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStaticPath() *string { return v.StaticPath }

// GetReleaseCommand returns UpdateProjectInput.ReleaseCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReleaseCommand() *string { return v.ReleaseCommand }

// GetNodejsVersion returns UpdateProjectInput.NodejsVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns UpdateProjectInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns UpdateProjectInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGolangVersion() *string { return v.GolangVersion }

// GetNoBuildCache returns UpdateProjectInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetKanikoFlags returns UpdateProjectInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetVolumes returns UpdateProjectInput.Volumes, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetVolumes() *string { return v.Volumes }

// GetPorts returns UpdateProjectInput.Ports, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPorts() *string { return v.Ports }

// GetReplication returns UpdateProjectInput.Replication, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReplication() []*ReplicationInput { return v.Replication }

// GetResources returns UpdateProjectInput.Resources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns UpdateProjectInput.BuildResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns UpdateProjectInput.BranchResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetServerlessResources returns UpdateProjectInput.ServerlessResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetServerlessResources() *ServerlessResourcesSpecInput {
	return v.ServerlessResources
}

// GetReadinessProbe returns UpdateProjectInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns UpdateProjectInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns UpdateProjectInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetAutoscaling returns UpdateProjectInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetPreStopSleep returns UpdateProjectInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns UpdateProjectInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetPrometheusScrape returns UpdateProjectInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPrometheusScrape() *PrometheusScrapeInput { return v.PrometheusScrape }

// GetHostNetwork returns UpdateProjectInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns UpdateProjectInput.StaticIP, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStaticIP() *bool { return v.StaticIP }

// GetIamPolicies returns UpdateProjectInput.IamPolicies, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetIamPolicies() []string { return v.IamPolicies }

// GetManualDeploy returns UpdateProjectInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns UpdateProjectInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns UpdateProjectInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployStrategy returns UpdateProjectInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetHelmVersion returns UpdateProjectInput.HelmVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHelmVersion() *string { return v.HelmVersion }

// GetHelmValues returns UpdateProjectInput.HelmValues, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHelmValues() *string { return v.HelmValues }

// GetTerraformVersion returns UpdateProjectInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerraformVersion() *string { return v.TerraformVersion }

// GetTerraformVariables returns UpdateProjectInput.TerraformVariables, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerraformVariables() *string { return v.TerraformVariables }

// GetManifests returns UpdateProjectInput.Manifests, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManifests() []string { return v.Manifests }

// GetManifestValue returns UpdateProjectInput.ManifestValue, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManifestValue() *string { return v.ManifestValue }

// GetAwsIamRole returns UpdateProjectInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns UpdateProjectInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGcpServiceAccount() *string { return v.GcpServiceAccount }

// GetClusterIssuerName returns UpdateProjectInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// GetLogShipper returns UpdateProjectInput.LogShipper, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDeployService returns UpdateProjectInput.DeployService, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns UpdateProjectInput.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployJob() *bool { return v.DeployJob }

// GetCronJobSchedule returns UpdateProjectInput.CronJobSchedule, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetCronJobSchedule() *string { return v.CronJobSchedule }

// GetProductionBranch returns UpdateProjectInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetContainerRepository returns UpdateProjectInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns UpdateProjectInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetContainerRegistryID returns UpdateProjectInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerRegistryID() *string { return v.ContainerRegistryID }

// GetNodeSelector returns UpdateProjectInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNodeSelector() *string { return v.NodeSelector }

// GetSecretMounts returns UpdateProjectInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSecretMounts() []*KubernetesSecretMountInput { return v.SecretMounts }

// GetKubernetesCustomization returns UpdateProjectInput.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetKubernetesCustomization() *KubernetesCustomizationInput {
	return v.KubernetesCustomization
}

// GetBuildCPU returns UpdateProjectInput.BuildCPU, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildCPU() *float64 { return v.BuildCPU }

// GetBuildMemory returns UpdateProjectInput.BuildMemory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildMemory() *float64 { return v.BuildMemory }

// GetCpu returns UpdateProjectInput.Cpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetCpu() *string { return v.Cpu }

// GetMemory returns UpdateProjectInput.Memory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetMemory() *string { return v.Memory }

// GetEphemeralStorage returns UpdateProjectInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetGpu returns UpdateProjectInput.Gpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGpu() *GPUInput { return v.Gpu }

// GetTpu returns UpdateProjectInput.Tpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTpu() *TPUInput { return v.Tpu }

// GetDedicated returns UpdateProjectInput.Dedicated, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDedicated() *bool { return v.Dedicated }

// GetGithubInstallationID returns UpdateProjectInput.GithubInstallationID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubInstallationID() *string { return v.GithubInstallationID }

// GetGithubRepository returns UpdateProjectInput.GithubRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubRepository() *string { return v.GithubRepository }

// GetDeployBranch returns UpdateProjectInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns UpdateProjectInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetDatadogApmEnabled returns UpdateProjectInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetPipelineClusterID returns UpdateProjectInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPipelineClusterID() *string { return v.PipelineClusterID }

// GetDeployTarget returns UpdateProjectInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

type VolumeInput struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns VolumeInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetMountPath() string { return v.MountPath }

// GetSize returns VolumeInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetSize() int { return v.Size }

// __createAppDockerInput is used internally by genqlient
type __createAppDockerInput struct {
	Input *CreateProjectDockerInput `json:"input,omitempty"`
}

// GetInput returns __createAppDockerInput.Input, and is useful for accessing the field via an interface.
func (v *__createAppDockerInput) GetInput() *CreateProjectDockerInput { return v.Input }

// __createAppGitInput is used internally by genqlient
type __createAppGitInput struct {
	Input *CreateProjectGitInput `json:"input,omitempty"`
}

// GetInput returns __createAppGitInput.Input, and is useful for accessing the field via an interface.
func (v *__createAppGitInput) GetInput() *CreateProjectGitInput { return v.Input }

// __createEnvironmentInput is used internally by genqlient
type __createEnvironmentInput struct {
	ProjectID string `json:"projectID"`
	Name      string `json:"name"`
}

// GetProjectID returns __createEnvironmentInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetProjectID() string { return v.ProjectID }

// GetName returns __createEnvironmentInput.Name, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetName() string { return v.Name }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	UserID string `json:"userID"`
	Name   string `json:"name"`
}

// GetUserID returns __createProjectInput.UserID, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetUserID() string { return v.UserID }

// GetName returns __createProjectInput.Name, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetName() string { return v.Name }

// __deleteAppInput is used internally by genqlient
type __deleteAppInput struct {
	AppID string `json:"appID"`
}

// GetAppID returns __deleteAppInput.AppID, and is useful for accessing the field via an interface.
func (v *__deleteAppInput) GetAppID() string { return v.AppID }

// __deleteEnvironmentInput is used internally by genqlient
type __deleteEnvironmentInput struct {
	EnvironmentID string `json:"environmentID"`
}

// GetEnvironmentID returns __deleteEnvironmentInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *__deleteEnvironmentInput) GetEnvironmentID() string { return v.EnvironmentID }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	ProjectID string `json:"projectID"`
}

// GetProjectID returns __deleteProjectInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetProjectID() string { return v.ProjectID }

// __disableAppInput is used internally by genqlient
type __disableAppInput struct {
	AppID string `json:"appID"`
}

// GetAppID returns __disableAppInput.AppID, and is useful for accessing the field via an interface.
func (v *__disableAppInput) GetAppID() string { return v.AppID }

// __enableAppInput is used internally by genqlient
type __enableAppInput struct {
	AppID string `json:"appID"`
}

// GetAppID returns __enableAppInput.AppID, and is useful for accessing the field via an interface.
func (v *__enableAppInput) GetAppID() string { return v.AppID }

// __getAppInput is used internally by genqlient
type __getAppInput struct {
	AppID string `json:"appID"`
}

// GetAppID returns __getAppInput.AppID, and is useful for accessing the field via an interface.
func (v *__getAppInput) GetAppID() string { return v.AppID }

// __getProjectByIDInput is used internally by genqlient
type __getProjectByIDInput struct {
	ProjectID string `json:"projectID"`
}

// GetProjectID returns __getProjectByIDInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__getProjectByIDInput) GetProjectID() string { return v.ProjectID }

// __getProjectEnvironmentsInput is used internally by genqlient
type __getProjectEnvironmentsInput struct {
	ProjectID string `json:"projectID"`
}

// GetProjectID returns __getProjectEnvironmentsInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__getProjectEnvironmentsInput) GetProjectID() string { return v.ProjectID }

// __updateAppInput is used internally by genqlient
type __updateAppInput struct {
	Input *UpdateProjectInput `json:"input,omitempty"`
}

// GetInput returns __updateAppInput.Input, and is useful for accessing the field via an interface.
func (v *__updateAppInput) GetInput() *UpdateProjectInput { return v.Input }

// __updateEnvironmentInput is used internally by genqlient
type __updateEnvironmentInput struct {
	EnvironmentID string  `json:"environmentID"`
	Name          *string `json:"name"`
}

// GetEnvironmentID returns __updateEnvironmentInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *__updateEnvironmentInput) GetEnvironmentID() string { return v.EnvironmentID }

// GetName returns __updateEnvironmentInput.Name, and is useful for accessing the field via an interface.
func (v *__updateEnvironmentInput) GetName() *string { return v.Name }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	ProjectID string  `json:"projectID"`
	Name      *string `json:"name"`
}

// GetProjectID returns __updateProjectInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetProjectID() string { return v.ProjectID }

// GetName returns __updateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetName() *string { return v.Name }

// createAppDockerCreateProjectDockerRepo includes the requested fields of the GraphQL type Repo.
type createAppDockerCreateProjectDockerRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns createAppDockerCreateProjectDockerRepo.Id, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns createAppDockerCreateProjectDockerRepo.Name, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns createAppDockerCreateProjectDockerRepo.Project, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetProject() *AppStateFragmentProject {
	return v.AppStateFragment.Project
}

// GetProjectEnvironment returns createAppDockerCreateProjectDockerRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns createAppDockerCreateProjectDockerRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns createAppDockerCreateProjectDockerRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetDeployTarget() *DeployTarget {
	return v.AppStateFragment.DeployTarget
}

// GetCluster returns createAppDockerCreateProjectDockerRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetCluster() *AppStateFragmentCluster {
	return v.AppStateFragment.Cluster
}

// GetEnvs returns createAppDockerCreateProjectDockerRepo.Envs, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar {
	return v.AppStateFragment.Envs
}

// GetCpu returns createAppDockerCreateProjectDockerRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns createAppDockerCreateProjectDockerRepo.Memory, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetMemory() *string {
	return v.AppStateFragment.Memory
}

// GetOwner returns createAppDockerCreateProjectDockerRepo.Owner, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetOwner() *AppStateFragmentOwnerUser {
	return v.AppStateFragment.Owner
}

// GetEnabled returns createAppDockerCreateProjectDockerRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns createAppDockerCreateProjectDockerRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetProductionBranch() *string {
	return v.AppStateFragment.ProductionBranch
}

// GetUpdatedAt returns createAppDockerCreateProjectDockerRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAppDockerCreateProjectDockerRepo) GetUpdatedAt() time.Time {
	return v.AppStateFragment.UpdatedAt
}

func (v *createAppDockerCreateProjectDockerRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAppDockerCreateProjectDockerRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createAppDockerCreateProjectDockerRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAppDockerCreateProjectDockerRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createAppDockerCreateProjectDockerRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAppDockerCreateProjectDockerRepo) __premarshalJSON() (*__premarshalcreateAppDockerCreateProjectDockerRepo, error) {
	var retval __premarshalcreateAppDockerCreateProjectDockerRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// createAppDockerResponse is returned by createAppDocker on success.
type createAppDockerResponse struct {
	CreateProjectDocker *createAppDockerCreateProjectDockerRepo `json:"createProjectDocker"`
}

// GetCreateProjectDocker returns createAppDockerResponse.CreateProjectDocker, and is useful for accessing the field via an interface.
func (v *createAppDockerResponse) GetCreateProjectDocker() *createAppDockerCreateProjectDockerRepo {
	return v.CreateProjectDocker
}

// createAppGitCreateProjectGitRepo includes the requested fields of the GraphQL type Repo.
type createAppGitCreateProjectGitRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns createAppGitCreateProjectGitRepo.Id, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns createAppGitCreateProjectGitRepo.Name, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns createAppGitCreateProjectGitRepo.Project, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetProject() *AppStateFragmentProject {
	return v.AppStateFragment.Project
}

// GetProjectEnvironment returns createAppGitCreateProjectGitRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns createAppGitCreateProjectGitRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns createAppGitCreateProjectGitRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetDeployTarget() *DeployTarget {
	return v.AppStateFragment.DeployTarget
}

// GetCluster returns createAppGitCreateProjectGitRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetCluster() *AppStateFragmentCluster {
	return v.AppStateFragment.Cluster
}

// GetEnvs returns createAppGitCreateProjectGitRepo.Envs, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar {
	return v.AppStateFragment.Envs
}

// GetCpu returns createAppGitCreateProjectGitRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns createAppGitCreateProjectGitRepo.Memory, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetMemory() *string { return v.AppStateFragment.Memory }

// GetOwner returns createAppGitCreateProjectGitRepo.Owner, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetOwner() *AppStateFragmentOwnerUser {
	return v.AppStateFragment.Owner
}

// GetEnabled returns createAppGitCreateProjectGitRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns createAppGitCreateProjectGitRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetProductionBranch() *string {
	return v.AppStateFragment.ProductionBranch
}

// GetUpdatedAt returns createAppGitCreateProjectGitRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetUpdatedAt() time.Time {
	return v.AppStateFragment.UpdatedAt
}

func (v *createAppGitCreateProjectGitRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAppGitCreateProjectGitRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createAppGitCreateProjectGitRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAppGitCreateProjectGitRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createAppGitCreateProjectGitRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAppGitCreateProjectGitRepo) __premarshalJSON() (*__premarshalcreateAppGitCreateProjectGitRepo, error) {
	var retval __premarshalcreateAppGitCreateProjectGitRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// createAppGitResponse is returned by createAppGit on success.
type createAppGitResponse struct {
	CreateProjectGit *createAppGitCreateProjectGitRepo `json:"createProjectGit"`
}

// GetCreateProjectGit returns createAppGitResponse.CreateProjectGit, and is useful for accessing the field via an interface.
func (v *createAppGitResponse) GetCreateProjectGit() *createAppGitCreateProjectGitRepo {
	return v.CreateProjectGit
}

// createEnvironmentCreateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type createEnvironmentCreateProjectEnvironment struct {
	EnvironmentStateFragment `json:"-"`
}

// GetId returns createEnvironmentCreateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetId() string {
	return v.EnvironmentStateFragment.Id
}

// GetName returns createEnvironmentCreateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetName() string {
	return v.EnvironmentStateFragment.Name
}

// GetProject returns createEnvironmentCreateProjectEnvironment.Project, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetProject() *EnvironmentStateFragmentProject {
	return v.EnvironmentStateFragment.Project
}

// GetUpdatedAt returns createEnvironmentCreateProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetUpdatedAt() time.Time {
	return v.EnvironmentStateFragment.UpdatedAt
}

func (v *createEnvironmentCreateProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createEnvironmentCreateProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.createEnvironmentCreateProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvironmentStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateEnvironmentCreateProjectEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *EnvironmentStateFragmentProject `json:"project"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createEnvironmentCreateProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createEnvironmentCreateProjectEnvironment) __premarshalJSON() (*__premarshalcreateEnvironmentCreateProjectEnvironment, error) {
	var retval __premarshalcreateEnvironmentCreateProjectEnvironment

	retval.Id = v.EnvironmentStateFragment.Id
	retval.Name = v.EnvironmentStateFragment.Name
	retval.Project = v.EnvironmentStateFragment.Project
	retval.UpdatedAt = v.EnvironmentStateFragment.UpdatedAt
	return &retval, nil
}

// createEnvironmentResponse is returned by createEnvironment on success.
type createEnvironmentResponse struct {
	CreateProjectEnvironment *createEnvironmentCreateProjectEnvironment `json:"createProjectEnvironment"`
}

// GetCreateProjectEnvironment returns createEnvironmentResponse.CreateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createEnvironmentResponse) GetCreateProjectEnvironment() *createEnvironmentCreateProjectEnvironment {
	return v.CreateProjectEnvironment
}

// createProjectCreateProjectV2Project includes the requested fields of the GraphQL type Project.
type createProjectCreateProjectV2Project struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns createProjectCreateProjectV2Project.Id, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetId() string { return v.Id }

// GetName returns createProjectCreateProjectV2Project.Name, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetName() string { return v.Name }

// GetUpdatedAt returns createProjectCreateProjectV2Project.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetUpdatedAt() time.Time { return v.UpdatedAt }

// createProjectResponse is returned by createProject on success.
type createProjectResponse struct {
	CreateProjectV2 *createProjectCreateProjectV2Project `json:"createProjectV2"`
}

// GetCreateProjectV2 returns createProjectResponse.CreateProjectV2, and is useful for accessing the field via an interface.
func (v *createProjectResponse) GetCreateProjectV2() *createProjectCreateProjectV2Project {
	return v.CreateProjectV2
}

// currentUserIDCurrentUser includes the requested fields of the GraphQL type User.
type currentUserIDCurrentUser struct {
	Id string `json:"id"`
}

// GetId returns currentUserIDCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *currentUserIDCurrentUser) GetId() string { return v.Id }

// currentUserIDResponse is returned by currentUserID on success.
type currentUserIDResponse struct {
	CurrentUser *currentUserIDCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns currentUserIDResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *currentUserIDResponse) GetCurrentUser() *currentUserIDCurrentUser { return v.CurrentUser }

// deleteAppResponse is returned by deleteApp on success.
type deleteAppResponse struct {
	DeleteRepo bool `json:"deleteRepo"`
}

// GetDeleteRepo returns deleteAppResponse.DeleteRepo, and is useful for accessing the field via an interface.
func (v *deleteAppResponse) GetDeleteRepo() bool { return v.DeleteRepo }

// deleteEnvironmentResponse is returned by deleteEnvironment on success.
type deleteEnvironmentResponse struct {
	DeleteProjectEnvironment bool `json:"deleteProjectEnvironment"`
}

// GetDeleteProjectEnvironment returns deleteEnvironmentResponse.DeleteProjectEnvironment, and is useful for accessing the field via an interface.
func (v *deleteEnvironmentResponse) GetDeleteProjectEnvironment() bool {
	return v.DeleteProjectEnvironment
}

// deleteProjectResponse is returned by deleteProject on success.
type deleteProjectResponse struct {
	DeleteProjectV2 bool `json:"deleteProjectV2"`
}

// GetDeleteProjectV2 returns deleteProjectResponse.DeleteProjectV2, and is useful for accessing the field via an interface.
func (v *deleteProjectResponse) GetDeleteProjectV2() bool { return v.DeleteProjectV2 }

// disableAppDisableRepo includes the requested fields of the GraphQL type Repo.
type disableAppDisableRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns disableAppDisableRepo.Id, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns disableAppDisableRepo.Name, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns disableAppDisableRepo.Project, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetProject() *AppStateFragmentProject {
	return v.AppStateFragment.Project
}

// GetProjectEnvironment returns disableAppDisableRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns disableAppDisableRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns disableAppDisableRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetDeployTarget() *DeployTarget {
	return v.AppStateFragment.DeployTarget
}

// GetCluster returns disableAppDisableRepo.Cluster, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetCluster() *AppStateFragmentCluster {
	return v.AppStateFragment.Cluster
}

// GetEnvs returns disableAppDisableRepo.Envs, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar {
	return v.AppStateFragment.Envs
}

// GetCpu returns disableAppDisableRepo.Cpu, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns disableAppDisableRepo.Memory, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetMemory() *string { return v.AppStateFragment.Memory }

// GetOwner returns disableAppDisableRepo.Owner, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetOwner() *AppStateFragmentOwnerUser {
	return v.AppStateFragment.Owner
}

// GetEnabled returns disableAppDisableRepo.Enabled, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns disableAppDisableRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetProductionBranch() *string {
	return v.AppStateFragment.ProductionBranch
}

// GetUpdatedAt returns disableAppDisableRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *disableAppDisableRepo) GetUpdatedAt() time.Time { return v.AppStateFragment.UpdatedAt }

func (v *disableAppDisableRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*disableAppDisableRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.disableAppDisableRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldisableAppDisableRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *disableAppDisableRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *disableAppDisableRepo) __premarshalJSON() (*__premarshaldisableAppDisableRepo, error) {
	var retval __premarshaldisableAppDisableRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// disableAppResponse is returned by disableApp on success.
type disableAppResponse struct {
	DisableRepo *disableAppDisableRepo `json:"disableRepo"`
}

// GetDisableRepo returns disableAppResponse.DisableRepo, and is useful for accessing the field via an interface.
func (v *disableAppResponse) GetDisableRepo() *disableAppDisableRepo { return v.DisableRepo }

// enableAppEnableRepo includes the requested fields of the GraphQL type Repo.
type enableAppEnableRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns enableAppEnableRepo.Id, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns enableAppEnableRepo.Name, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns enableAppEnableRepo.Project, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetProject() *AppStateFragmentProject {
	return v.AppStateFragment.Project
}

// GetProjectEnvironment returns enableAppEnableRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns enableAppEnableRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns enableAppEnableRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetDeployTarget() *DeployTarget { return v.AppStateFragment.DeployTarget }

// GetCluster returns enableAppEnableRepo.Cluster, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetCluster() *AppStateFragmentCluster {
	return v.AppStateFragment.Cluster
}

// GetEnvs returns enableAppEnableRepo.Envs, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar { return v.AppStateFragment.Envs }

// GetCpu returns enableAppEnableRepo.Cpu, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns enableAppEnableRepo.Memory, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetMemory() *string { return v.AppStateFragment.Memory }

// GetOwner returns enableAppEnableRepo.Owner, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetOwner() *AppStateFragmentOwnerUser { return v.AppStateFragment.Owner }

// GetEnabled returns enableAppEnableRepo.Enabled, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns enableAppEnableRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetProductionBranch() *string {
	return v.AppStateFragment.ProductionBranch
}

// GetUpdatedAt returns enableAppEnableRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *enableAppEnableRepo) GetUpdatedAt() time.Time { return v.AppStateFragment.UpdatedAt }

func (v *enableAppEnableRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*enableAppEnableRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.enableAppEnableRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalenableAppEnableRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *enableAppEnableRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *enableAppEnableRepo) __premarshalJSON() (*__premarshalenableAppEnableRepo, error) {
	var retval __premarshalenableAppEnableRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// enableAppResponse is returned by enableApp on success.
type enableAppResponse struct {
	EnableRepo *enableAppEnableRepo `json:"enableRepo"`
}

// GetEnableRepo returns enableAppResponse.EnableRepo, and is useful for accessing the field via an interface.
func (v *enableAppResponse) GetEnableRepo() *enableAppEnableRepo { return v.EnableRepo }

// getAppRepo includes the requested fields of the GraphQL type Repo.
type getAppRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns getAppRepo.Id, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns getAppRepo.Name, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns getAppRepo.Project, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetProject() *AppStateFragmentProject { return v.AppStateFragment.Project }

// GetProjectEnvironment returns getAppRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns getAppRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns getAppRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetDeployTarget() *DeployTarget { return v.AppStateFragment.DeployTarget }

// GetCluster returns getAppRepo.Cluster, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetCluster() *AppStateFragmentCluster { return v.AppStateFragment.Cluster }

// GetEnvs returns getAppRepo.Envs, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar { return v.AppStateFragment.Envs }

// GetCpu returns getAppRepo.Cpu, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns getAppRepo.Memory, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetMemory() *string { return v.AppStateFragment.Memory }

// GetOwner returns getAppRepo.Owner, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetOwner() *AppStateFragmentOwnerUser { return v.AppStateFragment.Owner }

// GetEnabled returns getAppRepo.Enabled, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns getAppRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetProductionBranch() *string { return v.AppStateFragment.ProductionBranch }

// GetUpdatedAt returns getAppRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAppRepo) GetUpdatedAt() time.Time { return v.AppStateFragment.UpdatedAt }

func (v *getAppRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAppRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.getAppRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAppRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *getAppRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAppRepo) __premarshalJSON() (*__premarshalgetAppRepo, error) {
	var retval __premarshalgetAppRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// getAppResponse is returned by getApp on success.
type getAppResponse struct {
	Repo *getAppRepo `json:"repo"`
}

// GetRepo returns getAppResponse.Repo, and is useful for accessing the field via an interface.
func (v *getAppResponse) GetRepo() *getAppRepo { return v.Repo }

// getProjectByIDProject includes the requested fields of the GraphQL type Project.
type getProjectByIDProject struct {
	ProjectStateFragment `json:"-"`
}

// GetId returns getProjectByIDProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetId() string { return v.ProjectStateFragment.Id }

// GetName returns getProjectByIDProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetName() string { return v.ProjectStateFragment.Name }

// GetUpdatedAt returns getProjectByIDProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetUpdatedAt() time.Time { return v.ProjectStateFragment.UpdatedAt }

// GetEnvironments returns getProjectByIDProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetEnvironments() []*ProjectStateFragmentEnvironmentsProjectEnvironment {
	return v.ProjectStateFragment.Environments
}

func (v *getProjectByIDProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectByIDProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectByIDProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectByIDProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	Environments []*ProjectStateFragmentEnvironmentsProjectEnvironment `json:"environments"`
}

func (v *getProjectByIDProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectByIDProject) __premarshalJSON() (*__premarshalgetProjectByIDProject, error) {
	var retval __premarshalgetProjectByIDProject

	retval.Id = v.ProjectStateFragment.Id
	retval.Name = v.ProjectStateFragment.Name
	retval.UpdatedAt = v.ProjectStateFragment.UpdatedAt
	retval.Environments = v.ProjectStateFragment.Environments
	return &retval, nil
}

// getProjectByIDResponse is returned by getProjectByID on success.
type getProjectByIDResponse struct {
	Project *getProjectByIDProject `json:"project"`
}

// GetProject returns getProjectByIDResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIDResponse) GetProject() *getProjectByIDProject { return v.Project }

// getProjectEnvironmentsProject includes the requested fields of the GraphQL type Project.
type getProjectEnvironmentsProject struct {
	ProjectStateFragment `json:"-"`
	Environments         []*getProjectEnvironmentsProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetEnvironments returns getProjectEnvironmentsProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProject) GetEnvironments() []*getProjectEnvironmentsProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// GetId returns getProjectEnvironmentsProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProject) GetId() string { return v.ProjectStateFragment.Id }

// GetName returns getProjectEnvironmentsProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProject) GetName() string { return v.ProjectStateFragment.Name }

// GetUpdatedAt returns getProjectEnvironmentsProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProject) GetUpdatedAt() time.Time {
	return v.ProjectStateFragment.UpdatedAt
}

func (v *getProjectEnvironmentsProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectEnvironmentsProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectEnvironmentsProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectEnvironmentsProject struct {
	Environments []*getProjectEnvironmentsProjectEnvironmentsProjectEnvironment `json:"environments"`

	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *getProjectEnvironmentsProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectEnvironmentsProject) __premarshalJSON() (*__premarshalgetProjectEnvironmentsProject, error) {
	var retval __premarshalgetProjectEnvironmentsProject

	retval.Environments = v.Environments
	retval.Id = v.ProjectStateFragment.Id
	retval.Name = v.ProjectStateFragment.Name
	retval.UpdatedAt = v.ProjectStateFragment.UpdatedAt
	return &retval, nil
}

// getProjectEnvironmentsProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type getProjectEnvironmentsProjectEnvironmentsProjectEnvironment struct {
	EnvironmentStateFragment `json:"-"`
}

// GetId returns getProjectEnvironmentsProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) GetId() string {
	return v.EnvironmentStateFragment.Id
}

// GetName returns getProjectEnvironmentsProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.EnvironmentStateFragment.Name
}

// GetProject returns getProjectEnvironmentsProjectEnvironmentsProjectEnvironment.Project, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) GetProject() *EnvironmentStateFragmentProject {
	return v.EnvironmentStateFragment.Project
}

// GetUpdatedAt returns getProjectEnvironmentsProjectEnvironmentsProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) GetUpdatedAt() time.Time {
	return v.EnvironmentStateFragment.UpdatedAt
}

func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectEnvironmentsProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectEnvironmentsProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvironmentStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectEnvironmentsProjectEnvironmentsProjectEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *EnvironmentStateFragmentProject `json:"project"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectEnvironmentsProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalgetProjectEnvironmentsProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalgetProjectEnvironmentsProjectEnvironmentsProjectEnvironment

	retval.Id = v.EnvironmentStateFragment.Id
	retval.Name = v.EnvironmentStateFragment.Name
	retval.Project = v.EnvironmentStateFragment.Project
	retval.UpdatedAt = v.EnvironmentStateFragment.UpdatedAt
	return &retval, nil
}

// getProjectEnvironmentsResponse is returned by getProjectEnvironments on success.
type getProjectEnvironmentsResponse struct {
	Project *getProjectEnvironmentsProject `json:"project"`
}

// GetProject returns getProjectEnvironmentsResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectEnvironmentsResponse) GetProject() *getProjectEnvironmentsProject {
	return v.Project
}

// updateAppResponse is returned by updateApp on success.
type updateAppResponse struct {
	UpdateProject *updateAppUpdateProjectRepo `json:"updateProject"`
}

// GetUpdateProject returns updateAppResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *updateAppResponse) GetUpdateProject() *updateAppUpdateProjectRepo { return v.UpdateProject }

// updateAppUpdateProjectRepo includes the requested fields of the GraphQL type Repo.
type updateAppUpdateProjectRepo struct {
	AppStateFragment `json:"-"`
}

// GetId returns updateAppUpdateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetId() string { return v.AppStateFragment.Id }

// GetName returns updateAppUpdateProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetName() string { return v.AppStateFragment.Name }

// GetProject returns updateAppUpdateProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetProject() *AppStateFragmentProject {
	return v.AppStateFragment.Project
}

// GetProjectEnvironment returns updateAppUpdateProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetProjectEnvironment() *AppStateFragmentProjectEnvironment {
	return v.AppStateFragment.ProjectEnvironment
}

// GetBuildMethod returns updateAppUpdateProjectRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetBuildMethod() *AppStateFragmentBuildMethod {
	return v.AppStateFragment.BuildMethod
}

// GetDeployTarget returns updateAppUpdateProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetDeployTarget() *DeployTarget {
	return v.AppStateFragment.DeployTarget
}

// GetCluster returns updateAppUpdateProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetCluster() *AppStateFragmentCluster {
	return v.AppStateFragment.Cluster
}

// GetEnvs returns updateAppUpdateProjectRepo.Envs, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetEnvs() []*AppStateFragmentEnvsEnvVar {
	return v.AppStateFragment.Envs
}

// GetCpu returns updateAppUpdateProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetCpu() *string { return v.AppStateFragment.Cpu }

// GetMemory returns updateAppUpdateProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetMemory() *string { return v.AppStateFragment.Memory }

// GetOwner returns updateAppUpdateProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetOwner() *AppStateFragmentOwnerUser {
	return v.AppStateFragment.Owner
}

// GetEnabled returns updateAppUpdateProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetEnabled() bool { return v.AppStateFragment.Enabled }

// GetProductionBranch returns updateAppUpdateProjectRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetProductionBranch() *string {
	return v.AppStateFragment.ProductionBranch
}

// GetUpdatedAt returns updateAppUpdateProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateAppUpdateProjectRepo) GetUpdatedAt() time.Time { return v.AppStateFragment.UpdatedAt }

func (v *updateAppUpdateProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateAppUpdateProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.updateAppUpdateProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AppStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateAppUpdateProjectRepo struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *AppStateFragmentProject `json:"project"`

	ProjectEnvironment *AppStateFragmentProjectEnvironment `json:"projectEnvironment"`

	BuildMethod *AppStateFragmentBuildMethod `json:"buildMethod"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *AppStateFragmentCluster `json:"cluster"`

	Envs []*AppStateFragmentEnvsEnvVar `json:"envs"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Owner *AppStateFragmentOwnerUser `json:"owner"`

	Enabled bool `json:"enabled"`

	ProductionBranch *string `json:"productionBranch"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *updateAppUpdateProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateAppUpdateProjectRepo) __premarshalJSON() (*__premarshalupdateAppUpdateProjectRepo, error) {
	var retval __premarshalupdateAppUpdateProjectRepo

	retval.Id = v.AppStateFragment.Id
	retval.Name = v.AppStateFragment.Name
	retval.Project = v.AppStateFragment.Project
	retval.ProjectEnvironment = v.AppStateFragment.ProjectEnvironment
	retval.BuildMethod = v.AppStateFragment.BuildMethod
	retval.DeployTarget = v.AppStateFragment.DeployTarget
	retval.Cluster = v.AppStateFragment.Cluster
	retval.Envs = v.AppStateFragment.Envs
	retval.Cpu = v.AppStateFragment.Cpu
	retval.Memory = v.AppStateFragment.Memory
	retval.Owner = v.AppStateFragment.Owner
	retval.Enabled = v.AppStateFragment.Enabled
	retval.ProductionBranch = v.AppStateFragment.ProductionBranch
	retval.UpdatedAt = v.AppStateFragment.UpdatedAt
	return &retval, nil
}

// updateEnvironmentResponse is returned by updateEnvironment on success.
type updateEnvironmentResponse struct {
	UpdateProjectEnvironment *updateEnvironmentUpdateProjectEnvironment `json:"updateProjectEnvironment"`
}

// GetUpdateProjectEnvironment returns updateEnvironmentResponse.UpdateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateEnvironmentResponse) GetUpdateProjectEnvironment() *updateEnvironmentUpdateProjectEnvironment {
	return v.UpdateProjectEnvironment
}

// updateEnvironmentUpdateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type updateEnvironmentUpdateProjectEnvironment struct {
	EnvironmentStateFragment `json:"-"`
}

// GetId returns updateEnvironmentUpdateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *updateEnvironmentUpdateProjectEnvironment) GetId() string {
	return v.EnvironmentStateFragment.Id
}

// GetName returns updateEnvironmentUpdateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *updateEnvironmentUpdateProjectEnvironment) GetName() string {
	return v.EnvironmentStateFragment.Name
}

// GetProject returns updateEnvironmentUpdateProjectEnvironment.Project, and is useful for accessing the field via an interface.
func (v *updateEnvironmentUpdateProjectEnvironment) GetProject() *EnvironmentStateFragmentProject {
	return v.EnvironmentStateFragment.Project
}

// GetUpdatedAt returns updateEnvironmentUpdateProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateEnvironmentUpdateProjectEnvironment) GetUpdatedAt() time.Time {
	return v.EnvironmentStateFragment.UpdatedAt
}

func (v *updateEnvironmentUpdateProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateEnvironmentUpdateProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.updateEnvironmentUpdateProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvironmentStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateEnvironmentUpdateProjectEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Project *EnvironmentStateFragmentProject `json:"project"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *updateEnvironmentUpdateProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateEnvironmentUpdateProjectEnvironment) __premarshalJSON() (*__premarshalupdateEnvironmentUpdateProjectEnvironment, error) {
	var retval __premarshalupdateEnvironmentUpdateProjectEnvironment

	retval.Id = v.EnvironmentStateFragment.Id
	retval.Name = v.EnvironmentStateFragment.Name
	retval.Project = v.EnvironmentStateFragment.Project
	retval.UpdatedAt = v.EnvironmentStateFragment.UpdatedAt
	return &retval, nil
}

// updateProjectResponse is returned by updateProject on success.
type updateProjectResponse struct {
	UpdateProjectV2 *updateProjectUpdateProjectV2Project `json:"updateProjectV2"`
}

// GetUpdateProjectV2 returns updateProjectResponse.UpdateProjectV2, and is useful for accessing the field via an interface.
func (v *updateProjectResponse) GetUpdateProjectV2() *updateProjectUpdateProjectV2Project {
	return v.UpdateProjectV2
}

// updateProjectUpdateProjectV2Project includes the requested fields of the GraphQL type Project.
type updateProjectUpdateProjectV2Project struct {
	ProjectStateFragment `json:"-"`
}

// GetId returns updateProjectUpdateProjectV2Project.Id, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProjectV2Project) GetId() string { return v.ProjectStateFragment.Id }

// GetName returns updateProjectUpdateProjectV2Project.Name, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProjectV2Project) GetName() string { return v.ProjectStateFragment.Name }

// GetUpdatedAt returns updateProjectUpdateProjectV2Project.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProjectV2Project) GetUpdatedAt() time.Time {
	return v.ProjectStateFragment.UpdatedAt
}

// GetEnvironments returns updateProjectUpdateProjectV2Project.Environments, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProjectV2Project) GetEnvironments() []*ProjectStateFragmentEnvironmentsProjectEnvironment {
	return v.ProjectStateFragment.Environments
}

func (v *updateProjectUpdateProjectV2Project) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectUpdateProjectV2Project
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectUpdateProjectV2Project = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectStateFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectUpdateProjectV2Project struct {
	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	Environments []*ProjectStateFragmentEnvironmentsProjectEnvironment `json:"environments"`
}

func (v *updateProjectUpdateProjectV2Project) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectUpdateProjectV2Project) __premarshalJSON() (*__premarshalupdateProjectUpdateProjectV2Project, error) {
	var retval __premarshalupdateProjectUpdateProjectV2Project

	retval.Id = v.ProjectStateFragment.Id
	retval.Name = v.ProjectStateFragment.Name
	retval.UpdatedAt = v.ProjectStateFragment.UpdatedAt
	retval.Environments = v.ProjectStateFragment.Environments
	return &retval, nil
}

func createAppDocker(
	ctx context.Context,
	client graphql.Client,
	input *CreateProjectDockerInput,
) (*createAppDockerResponse, error) {
	req := &graphql.Request{
		OpName: "createAppDocker",
		Query: `
mutation createAppDocker ($input: CreateProjectDockerInput!) {
	createProjectDocker(input: $input) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__createAppDockerInput{
			Input: input,
		},
	}
	var err error

	var data createAppDockerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// ## Apps ###
// Used to create Zeet "Repos", aka "Apps"
// ProjectID and EnvironmentID are expected to be specified
func createAppGit(
	ctx context.Context,
	client graphql.Client,
	input *CreateProjectGitInput,
) (*createAppGitResponse, error) {
	req := &graphql.Request{
		OpName: "createAppGit",
		Query: `
mutation createAppGit ($input: CreateProjectGitInput!) {
	createProjectGit(input: $input) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__createAppGitInput{
			Input: input,
		},
	}
	var err error

	var data createAppGitResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createEnvironment(
	ctx context.Context,
	client graphql.Client,
	projectID string,
	name string,
) (*createEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "createEnvironment",
		Query: `
mutation createEnvironment ($projectID: UUID!, $name: String!) {
	createProjectEnvironment(input: {projectID:$projectID,name:$name}) {
		... EnvironmentStateFragment
	}
}
fragment EnvironmentStateFragment on ProjectEnvironment {
	id
	name
	project {
		id
	}
	updatedAt
}
`,
		Variables: &__createEnvironmentInput{
			ProjectID: projectID,
			Name:      name,
		},
	}
	var err error

	var data createEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// ## Project ###
func createProject(
	ctx context.Context,
	client graphql.Client,
	userID string,
	name string,
) (*createProjectResponse, error) {
	req := &graphql.Request{
		OpName: "createProject",
		Query: `
mutation createProject ($userID: UUID!, $name: String!) {
	createProjectV2(input: {userID:$userID,name:$name}) {
		id
		name
		updatedAt
	}
}
`,
		Variables: &__createProjectInput{
			UserID: userID,
			Name:   name,
		},
	}
	var err error

	var data createProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func currentUserID(
	ctx context.Context,
	client graphql.Client,
) (*currentUserIDResponse, error) {
	req := &graphql.Request{
		OpName: "currentUserID",
		Query: `
query currentUserID {
	currentUser {
		id
	}
}
`,
	}
	var err error

	var data currentUserIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteApp(
	ctx context.Context,
	client graphql.Client,
	appID string,
) (*deleteAppResponse, error) {
	req := &graphql.Request{
		OpName: "deleteApp",
		Query: `
mutation deleteApp ($appID: ID!) {
	deleteRepo(id: $appID)
}
`,
		Variables: &__deleteAppInput{
			AppID: appID,
		},
	}
	var err error

	var data deleteAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteEnvironment(
	ctx context.Context,
	client graphql.Client,
	environmentID string,
) (*deleteEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deleteEnvironment",
		Query: `
mutation deleteEnvironment ($environmentID: UUID!) {
	deleteProjectEnvironment(id: $environmentID)
}
`,
		Variables: &__deleteEnvironmentInput{
			EnvironmentID: environmentID,
		},
	}
	var err error

	var data deleteEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteProject(
	ctx context.Context,
	client graphql.Client,
	projectID string,
) (*deleteProjectResponse, error) {
	req := &graphql.Request{
		OpName: "deleteProject",
		Query: `
mutation deleteProject ($projectID: UUID!) {
	deleteProjectV2(id: $projectID)
}
`,
		Variables: &__deleteProjectInput{
			ProjectID: projectID,
		},
	}
	var err error

	var data deleteProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func disableApp(
	ctx context.Context,
	client graphql.Client,
	appID string,
) (*disableAppResponse, error) {
	req := &graphql.Request{
		OpName: "disableApp",
		Query: `
mutation disableApp ($appID: ID!) {
	disableRepo(id: $appID) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__disableAppInput{
			AppID: appID,
		},
	}
	var err error

	var data disableAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func enableApp(
	ctx context.Context,
	client graphql.Client,
	appID string,
) (*enableAppResponse, error) {
	req := &graphql.Request{
		OpName: "enableApp",
		Query: `
mutation enableApp ($appID: ID!) {
	enableRepo(id: $appID) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__enableAppInput{
			AppID: appID,
		},
	}
	var err error

	var data enableAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getApp(
	ctx context.Context,
	client graphql.Client,
	appID string,
) (*getAppResponse, error) {
	req := &graphql.Request{
		OpName: "getApp",
		Query: `
query getApp ($appID: UUID!) {
	repo(id: $appID) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__getAppInput{
			AppID: appID,
		},
	}
	var err error

	var data getAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectByID(
	ctx context.Context,
	client graphql.Client,
	projectID string,
) (*getProjectByIDResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectByID",
		Query: `
query getProjectByID ($projectID: UUID!) {
	project(id: $projectID) {
		... ProjectStateFragment
	}
}
fragment ProjectStateFragment on Project {
	id
	name
	updatedAt
	environments {
		id
		name
		updatedAt
	}
}
`,
		Variables: &__getProjectByIDInput{
			ProjectID: projectID,
		},
	}
	var err error

	var data getProjectByIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectEnvironments(
	ctx context.Context,
	client graphql.Client,
	projectID string,
) (*getProjectEnvironmentsResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectEnvironments",
		Query: `
query getProjectEnvironments ($projectID: UUID!) {
	project(id: $projectID) {
		... ProjectStateFragment
		environments {
			... EnvironmentStateFragment
		}
	}
}
fragment ProjectStateFragment on Project {
	id
	name
	updatedAt
	environments {
		id
		name
		updatedAt
	}
}
fragment EnvironmentStateFragment on ProjectEnvironment {
	id
	name
	project {
		id
	}
	updatedAt
}
`,
		Variables: &__getProjectEnvironmentsInput{
			ProjectID: projectID,
		},
	}
	var err error

	var data getProjectEnvironmentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateApp(
	ctx context.Context,
	client graphql.Client,
	input *UpdateProjectInput,
) (*updateAppResponse, error) {
	req := &graphql.Request{
		OpName: "updateApp",
		Query: `
mutation updateApp ($input: UpdateProjectInput!) {
	updateProject(input: $input) {
		... AppStateFragment
	}
}
fragment AppStateFragment on Repo {
	id
	name
	project {
		id
	}
	projectEnvironment {
		id
	}
	buildMethod {
		type
		dockerfilePath
	}
	deployTarget
	cluster {
		id
	}
	envs {
		id
		name
		value
		sealed
	}
	cpu
	memory
	owner {
		id
	}
	enabled
	productionBranch
	updatedAt
}
`,
		Variables: &__updateAppInput{
			Input: input,
		},
	}
	var err error

	var data updateAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateEnvironment(
	ctx context.Context,
	client graphql.Client,
	environmentID string,
	name *string,
) (*updateEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "updateEnvironment",
		Query: `
mutation updateEnvironment ($environmentID: UUID!, $name: String) {
	updateProjectEnvironment(input: {id:$environmentID,name:$name}) {
		... EnvironmentStateFragment
	}
}
fragment EnvironmentStateFragment on ProjectEnvironment {
	id
	name
	project {
		id
	}
	updatedAt
}
`,
		Variables: &__updateEnvironmentInput{
			EnvironmentID: environmentID,
			Name:          name,
		},
	}
	var err error

	var data updateEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateProject(
	ctx context.Context,
	client graphql.Client,
	projectID string,
	name *string,
) (*updateProjectResponse, error) {
	req := &graphql.Request{
		OpName: "updateProject",
		Query: `
mutation updateProject ($projectID: UUID!, $name: String) {
	updateProjectV2(input: {id:$projectID,name:$name}) {
		... ProjectStateFragment
	}
}
fragment ProjectStateFragment on Project {
	id
	name
	updatedAt
	environments {
		id
		name
		updatedAt
	}
}
`,
		Variables: &__updateProjectInput{
			ProjectID: projectID,
			Name:      name,
		},
	}
	var err error

	var data updateProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
