// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AcceleratorSpecInput struct {
	Type         string  `json:"type"`
	Count        int     `json:"count"`
	TpuTfVersion *string `json:"tpuTfVersion"`
}

// GetType returns AcceleratorSpecInput.Type, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetType() string { return v.Type }

// GetCount returns AcceleratorSpecInput.Count, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetCount() int { return v.Count }

// GetTpuTfVersion returns AcceleratorSpecInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetTpuTfVersion() *string { return v.TpuTfVersion }

type AutoscalingInput struct {
	MinReplicas          int                        `json:"minReplicas"`
	MaxReplicas          int                        `json:"maxReplicas"`
	CoolDownPeriod       *int                       `json:"coolDownPeriod"`
	Triggers             []*AutoscalingTriggerInput `json:"triggers,omitempty"`
	KedaScaledObjectSpec *string                    `json:"kedaScaledObjectSpec"`
}

// GetMinReplicas returns AutoscalingInput.MinReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns AutoscalingInput.MaxReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns AutoscalingInput.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetCoolDownPeriod() *int { return v.CoolDownPeriod }

// GetTriggers returns AutoscalingInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetTriggers() []*AutoscalingTriggerInput { return v.Triggers }

// GetKedaScaledObjectSpec returns AutoscalingInput.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetKedaScaledObjectSpec() *string { return v.KedaScaledObjectSpec }

type AutoscalingTriggerInput struct {
	Type AutoscalingType `json:"type"`
	Spec string          `json:"spec"`
}

// GetType returns AutoscalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetType() AutoscalingType { return v.Type }

// GetSpec returns AutoscalingTriggerInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetSpec() string { return v.Spec }

type AutoscalingType string

const (
	AutoscalingTypeCpu        AutoscalingType = "CPU"
	AutoscalingTypeMemory     AutoscalingType = "MEMORY"
	AutoscalingTypePrometheus AutoscalingType = "PROMETHEUS"
	AutoscalingTypeCustom     AutoscalingType = "CUSTOM"
)

type BuildTarget string

const (
	BuildTargetNullRegistry      BuildTarget = "NULL_REGISTRY"
	BuildTargetClusterRegistry   BuildTarget = "CLUSTER_REGISTRY"
	BuildTargetContainerRegistry BuildTarget = "CONTAINER_REGISTRY"
)

type BuildTargetInput struct {
	BuildTarget BuildTarget `json:"buildTarget"`
	ClusterID   *string     `json:"clusterID"`
}

// GetBuildTarget returns BuildTargetInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetBuildTarget() BuildTarget { return v.BuildTarget }

// GetClusterID returns BuildTargetInput.ClusterID, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetClusterID() *string { return v.ClusterID }

type BuildType string

const (
	BuildTypeDocker        BuildType = "DOCKER"
	BuildTypeBuildpacks    BuildType = "BUILDPACKS"
	BuildTypePython        BuildType = "PYTHON"
	BuildTypePythonDjango  BuildType = "PYTHON_DJANGO"
	BuildTypeNode          BuildType = "NODE"
	BuildTypeNodeStatic    BuildType = "NODE_STATIC"
	BuildTypeNodeNextjs    BuildType = "NODE_NEXTJS"
	BuildTypeUbuntu        BuildType = "UBUNTU"
	BuildTypeElixirPhoenix BuildType = "ELIXIR_PHOENIX"
	BuildTypeGolangModules BuildType = "GOLANG_MODULES"
	BuildTypeHerokuish     BuildType = "HEROKUISH"
)

type ContainerResourcesSpecInput struct {
	Cpu              float64               `json:"cpu"`
	Memory           float64               `json:"memory"`
	EphemeralStorage *float64              `json:"ephemeralStorage"`
	Accelerator      *AcceleratorSpecInput `json:"accelerator,omitempty"`
	Spot             *bool                 `json:"spot"`
}

// GetCpu returns ContainerResourcesSpecInput.Cpu, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetCpu() float64 { return v.Cpu }

// GetMemory returns ContainerResourcesSpecInput.Memory, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetMemory() float64 { return v.Memory }

// GetEphemeralStorage returns ContainerResourcesSpecInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetAccelerator returns ContainerResourcesSpecInput.Accelerator, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetAccelerator() *AcceleratorSpecInput { return v.Accelerator }

// GetSpot returns ContainerResourcesSpecInput.Spot, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetSpot() *bool { return v.Spot }

type CreateProjectGitInput struct {
	UserID                        *string                      `json:"userID"`
	Name                          *string                      `json:"name"`
	ProjectID                     *string                      `json:"projectID"`
	EnvironmentID                 *string                      `json:"environmentID"`
	ProjectName                   *string                      `json:"projectName"`
	EnvironmentName               *string                      `json:"environmentName"`
	Url                           string                       `json:"url"`
	ProductionBranch              *string                      `json:"productionBranch"`
	BuildTarget                   *BuildTargetInput            `json:"buildTarget,omitempty"`
	DeployTarget                  *ProjectDeployInput          `json:"deployTarget,omitempty"`
	Build                         *ProjectBuildInput           `json:"build,omitempty"`
	DeployService                 *bool                        `json:"deployService"`
	DeployJob                     *bool                        `json:"deployJob"`
	ManualDeploy                  *bool                        `json:"manualDeploy"`
	AutoRetry                     *bool                        `json:"autoRetry"`
	AutoRollback                  *bool                        `json:"autoRollback"`
	DeployBranch                  *bool                        `json:"deployBranch"`
	BranchIgnore                  *string                      `json:"branchIgnore"`
	ContainerRepository           *string                      `json:"containerRepository"`
	ContainerCacheRepository      *string                      `json:"containerCacheRepository"`
	ContainerRegistryID           *string                      `json:"containerRegistryID"`
	Resources                     *ContainerResourcesSpecInput `json:"resources,omitempty"`
	BuildResources                *ContainerResourcesSpecInput `json:"buildResources,omitempty"`
	BranchResources               *ContainerResourcesSpecInput `json:"branchResources,omitempty"`
	Envs                          []*EnvVarInput               `json:"envs,omitempty"`
	Ports                         []*PortInput                 `json:"ports,omitempty"`
	Volumes                       []*VolumeInput               `json:"volumes,omitempty"`
	Replication                   []*ReplicationInput          `json:"replication,omitempty"`
	RunCommand                    *string                      `json:"runCommand"`
	LogShipper                    *LogShipperInput             `json:"logShipper,omitempty"`
	DeployStrategy                *DeployStrategy              `json:"deployStrategy"`
	Autoscaling                   *AutoscalingInput            `json:"autoscaling,omitempty"`
	PreStopSleep                  *int                         `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                         `json:"terminationGracePeriodSeconds"`
	PrometheusScrape              *PrometheusScrapeInput       `json:"prometheusScrape,omitempty"`
	ReadinessProbe                *ProbeInput                  `json:"readinessProbe,omitempty"`
	LivenessProbe                 *ProbeInput                  `json:"livenessProbe,omitempty"`
	StartupProbe                  *ProbeInput                  `json:"startupProbe,omitempty"`
	ClusterIssuerName             *string                      `json:"clusterIssuerName"`
	HostNetwork                   *bool                        `json:"hostNetwork"`
	StaticIP                      *bool                        `json:"staticIP"`
	NodeSelector                  *string                      `json:"nodeSelector"`
	NoBuildCache                  *bool                        `json:"noBuildCache"`
	KanikoFlags                   *KanikoFlagsInput            `json:"kanikoFlags,omitempty"`
	DatadogApmEnabled             *bool                        `json:"datadogApmEnabled"`
	Enabled                       *bool                        `json:"enabled"`
	PipelineClusterID             *string                      `json:"pipelineClusterID"`
	Path                          *string                      `json:"path"`
}

// GetUserID returns CreateProjectGitInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUserID() *string { return v.UserID }

// GetName returns CreateProjectGitInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectGitInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectID() *string { return v.ProjectID }

// GetEnvironmentID returns CreateProjectGitInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentID() *string { return v.EnvironmentID }

// GetProjectName returns CreateProjectGitInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectGitInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetUrl returns CreateProjectGitInput.Url, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUrl() string { return v.Url }

// GetProductionBranch returns CreateProjectGitInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetBuildTarget returns CreateProjectGitInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildTarget() *BuildTargetInput { return v.BuildTarget }

// GetDeployTarget returns CreateProjectGitInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetBuild returns CreateProjectGitInput.Build, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuild() *ProjectBuildInput { return v.Build }

// GetDeployService returns CreateProjectGitInput.DeployService, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns CreateProjectGitInput.DeployJob, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployJob() *bool { return v.DeployJob }

// GetManualDeploy returns CreateProjectGitInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns CreateProjectGitInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns CreateProjectGitInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployBranch returns CreateProjectGitInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns CreateProjectGitInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetContainerRepository returns CreateProjectGitInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns CreateProjectGitInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerCacheRepository() *string {
	return v.ContainerCacheRepository
}

// GetContainerRegistryID returns CreateProjectGitInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRegistryID() *string { return v.ContainerRegistryID }

// GetResources returns CreateProjectGitInput.Resources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns CreateProjectGitInput.BuildResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns CreateProjectGitInput.BranchResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetEnvs returns CreateProjectGitInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvs() []*EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectGitInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPorts() []*PortInput { return v.Ports }

// GetVolumes returns CreateProjectGitInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetVolumes() []*VolumeInput { return v.Volumes }

// GetReplication returns CreateProjectGitInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReplication() []*ReplicationInput { return v.Replication }

// GetRunCommand returns CreateProjectGitInput.RunCommand, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetRunCommand() *string { return v.RunCommand }

// GetLogShipper returns CreateProjectGitInput.LogShipper, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDeployStrategy returns CreateProjectGitInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetAutoscaling returns CreateProjectGitInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetPreStopSleep returns CreateProjectGitInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns CreateProjectGitInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetPrometheusScrape returns CreateProjectGitInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPrometheusScrape() *PrometheusScrapeInput {
	return v.PrometheusScrape
}

// GetReadinessProbe returns CreateProjectGitInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns CreateProjectGitInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns CreateProjectGitInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetClusterIssuerName returns CreateProjectGitInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// GetHostNetwork returns CreateProjectGitInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns CreateProjectGitInput.StaticIP, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStaticIP() *bool { return v.StaticIP }

// GetNodeSelector returns CreateProjectGitInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNodeSelector() *string { return v.NodeSelector }

// GetNoBuildCache returns CreateProjectGitInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetKanikoFlags returns CreateProjectGitInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetDatadogApmEnabled returns CreateProjectGitInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetEnabled returns CreateProjectGitInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnabled() *bool { return v.Enabled }

// GetPipelineClusterID returns CreateProjectGitInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPipelineClusterID() *string { return v.PipelineClusterID }

// GetPath returns CreateProjectGitInput.Path, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPath() *string { return v.Path }

type DatadogLogIntegrationInput struct {
	Key  string  `json:"key"`
	Host *string `json:"host"`
}

// GetKey returns DatadogLogIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetKey() string { return v.Key }

// GetHost returns DatadogLogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetHost() *string { return v.Host }

type DeployRuntime string

const (
	DeployRuntimeAwsLambda   DeployRuntime = "AWS_LAMBDA"
	DeployRuntimeAwsEcs      DeployRuntime = "AWS_ECS"
	DeployRuntimeGcpCloudRun DeployRuntime = "GCP_CLOUD_RUN"
	DeployRuntimeKubernetes  DeployRuntime = "KUBERNETES"
	DeployRuntimeKnative     DeployRuntime = "KNATIVE"
)

type DeployStrategy string

const (
	DeployStrategyRestart   DeployStrategy = "RESTART"
	DeployStrategyRolling   DeployStrategy = "ROLLING"
	DeployStrategyCanary    DeployStrategy = "CANARY"
	DeployStrategyBlueGreen DeployStrategy = "BLUE_GREEN"
	DeployStrategyRedBlack  DeployStrategy = "RED_BLACK"
)

type DeployTarget string

const (
	DeployTargetKubernetes        DeployTarget = "KUBERNETES"
	DeployTargetServerless        DeployTarget = "SERVERLESS"
	DeployTargetTerraform         DeployTarget = "TERRAFORM"
	DeployTargetPulumi            DeployTarget = "PULUMI"
	DeployTargetAwsSam            DeployTarget = "AWS_SAM"
	DeployTargetAwsCdk            DeployTarget = "AWS_CDK"
	DeployTargetAwsCloudformation DeployTarget = "AWS_CLOUDFORMATION"
	DeployTargetGcpCloudRun       DeployTarget = "GCP_CLOUD_RUN"
)

type DeployType string

const (
	DeployTypeKubernetes DeployType = "KUBERNETES"
	DeployTypeKnative    DeployType = "KNATIVE"
	DeployTypeHelm       DeployType = "HELM"
	DeployTypeKubectl    DeployType = "KUBECTL"
)

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed *bool  `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() *bool { return v.Sealed }

type KanikoFlagsInput struct {
	CompressedCaching *bool `json:"compressedCaching"`
}

// GetCompressedCaching returns KanikoFlagsInput.CompressedCaching, and is useful for accessing the field via an interface.
func (v *KanikoFlagsInput) GetCompressedCaching() *bool { return v.CompressedCaching }

type LogDNAIntegrationInput struct {
	Key string `json:"key"`
}

// GetKey returns LogDNAIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *LogDNAIntegrationInput) GetKey() string { return v.Key }

type LogShipperInput struct {
	Type    *LogShipperType             `json:"type"`
	Logz    *LogzIntegrationInput       `json:"logz,omitempty"`
	Syslog  *SyslogIntegrationInput     `json:"syslog,omitempty"`
	LogDNA  *LogDNAIntegrationInput     `json:"logDNA,omitempty"`
	Datadog *DatadogLogIntegrationInput `json:"datadog,omitempty"`
}

// GetType returns LogShipperInput.Type, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetType() *LogShipperType { return v.Type }

// GetLogz returns LogShipperInput.Logz, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogz() *LogzIntegrationInput { return v.Logz }

// GetSyslog returns LogShipperInput.Syslog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetSyslog() *SyslogIntegrationInput { return v.Syslog }

// GetLogDNA returns LogShipperInput.LogDNA, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogDNA() *LogDNAIntegrationInput { return v.LogDNA }

// GetDatadog returns LogShipperInput.Datadog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetDatadog() *DatadogLogIntegrationInput { return v.Datadog }

type LogShipperType string

const (
	LogShipperTypeLogzio  LogShipperType = "LOGZIO"
	LogShipperTypeSyslog  LogShipperType = "SYSLOG"
	LogShipperTypeLogdna  LogShipperType = "LOGDNA"
	LogShipperTypeDatadog LogShipperType = "DATADOG"
)

type LogzIntegrationInput struct {
	Token string `json:"token"`
	Url   string `json:"url"`
}

// GetToken returns LogzIntegrationInput.Token, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetToken() string { return v.Token }

// GetUrl returns LogzIntegrationInput.Url, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetUrl() string { return v.Url }

type PortInput struct {
	Port     string       `json:"port"`
	Protocol PortProtocol `json:"protocol"`
	Public   bool         `json:"public"`
	Https    bool         `json:"https"`
	Grpc     *bool        `json:"grpc"`
}

// GetPort returns PortInput.Port, and is useful for accessing the field via an interface.
func (v *PortInput) GetPort() string { return v.Port }

// GetProtocol returns PortInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortInput) GetProtocol() PortProtocol { return v.Protocol }

// GetPublic returns PortInput.Public, and is useful for accessing the field via an interface.
func (v *PortInput) GetPublic() bool { return v.Public }

// GetHttps returns PortInput.Https, and is useful for accessing the field via an interface.
func (v *PortInput) GetHttps() bool { return v.Https }

// GetGrpc returns PortInput.Grpc, and is useful for accessing the field via an interface.
func (v *PortInput) GetGrpc() *bool { return v.Grpc }

type PortProtocol string

const (
	PortProtocolTcp PortProtocol = "tcp"
	PortProtocolUdp PortProtocol = "udp"
)

type ProbeInput struct {
	Command             *string `json:"command"`
	HttpEndpoint        *string `json:"httpEndpoint"`
	TcpEndpoint         *string `json:"tcpEndpoint"`
	InitialDelaySeconds *int    `json:"initialDelaySeconds"`
	PeriodSeconds       *int    `json:"periodSeconds"`
	SuccessThreshold    *int    `json:"successThreshold"`
	FailureThreshold    *int    `json:"failureThreshold"`
	TimeoutSeconds      *int    `json:"timeoutSeconds"`
}

// GetCommand returns ProbeInput.Command, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetCommand() *string { return v.Command }

// GetHttpEndpoint returns ProbeInput.HttpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetHttpEndpoint() *string { return v.HttpEndpoint }

// GetTcpEndpoint returns ProbeInput.TcpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTcpEndpoint() *string { return v.TcpEndpoint }

// GetInitialDelaySeconds returns ProbeInput.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetInitialDelaySeconds() *int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeInput.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetPeriodSeconds() *int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeInput.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetSuccessThreshold() *int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeInput.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetFailureThreshold() *int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTimeoutSeconds() *int { return v.TimeoutSeconds }

type ProjectBuildInput struct {
	BuildType        *BuildType `json:"buildType"`
	DockerfilePath   *string    `json:"dockerfilePath"`
	WorkingDirectory *string    `json:"workingDirectory"`
	BuildCommand     *string    `json:"buildCommand"`
	RunCommand       *string    `json:"runCommand"`
	StaticPath       *string    `json:"staticPath"`
	NodejsVersion    *string    `json:"nodejsVersion"`
	PythonVersion    *string    `json:"pythonVersion"`
	GolangVersion    *string    `json:"golangVersion"`
}

// GetBuildType returns ProjectBuildInput.BuildType, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildType() *BuildType { return v.BuildType }

// GetDockerfilePath returns ProjectBuildInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetWorkingDirectory returns ProjectBuildInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns ProjectBuildInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildCommand() *string { return v.BuildCommand }

// GetRunCommand returns ProjectBuildInput.RunCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns ProjectBuildInput.StaticPath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetStaticPath() *string { return v.StaticPath }

// GetNodejsVersion returns ProjectBuildInput.NodejsVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns ProjectBuildInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns ProjectBuildInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetGolangVersion() *string { return v.GolangVersion }

type ProjectDeployInput struct {
	DeployTarget    DeployTarget   `json:"deployTarget"`
	DeployType      *DeployType    `json:"deployType"`
	DeployRuntime   *DeployRuntime `json:"deployRuntime"`
	AwsAccountID    *string        `json:"awsAccountID"`
	GcpAccountID    *string        `json:"gcpAccountID"`
	DoAccountID     *string        `json:"doAccountID"`
	LinodeAccountID *string        `json:"linodeAccountID"`
	ClusterID       *string        `json:"clusterID"`
	Region          *string        `json:"region"`
}

// GetDeployTarget returns ProjectDeployInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployTarget() DeployTarget { return v.DeployTarget }

// GetDeployType returns ProjectDeployInput.DeployType, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployType() *DeployType { return v.DeployType }

// GetDeployRuntime returns ProjectDeployInput.DeployRuntime, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployRuntime() *DeployRuntime { return v.DeployRuntime }

// GetAwsAccountID returns ProjectDeployInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetAwsAccountID() *string { return v.AwsAccountID }

// GetGcpAccountID returns ProjectDeployInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetGcpAccountID() *string { return v.GcpAccountID }

// GetDoAccountID returns ProjectDeployInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDoAccountID() *string { return v.DoAccountID }

// GetLinodeAccountID returns ProjectDeployInput.LinodeAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetLinodeAccountID() *string { return v.LinodeAccountID }

// GetClusterID returns ProjectDeployInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetClusterID() *string { return v.ClusterID }

// GetRegion returns ProjectDeployInput.Region, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetRegion() *string { return v.Region }

type PrometheusScrapeInput struct {
	Path string `json:"path"`
	Port int    `json:"port"`
}

// GetPath returns PrometheusScrapeInput.Path, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPath() string { return v.Path }

// GetPort returns PrometheusScrapeInput.Port, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPort() int { return v.Port }

type ReplicationInput struct {
	Region    string  `json:"region"`
	Replicas  int     `json:"replicas"`
	ClusterID *string `json:"clusterID"`
}

// GetRegion returns ReplicationInput.Region, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetRegion() string { return v.Region }

// GetReplicas returns ReplicationInput.Replicas, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetReplicas() int { return v.Replicas }

// GetClusterID returns ReplicationInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetClusterID() *string { return v.ClusterID }

type SyslogIntegrationInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Mode string `json:"mode"`
}

// GetHost returns SyslogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetHost() string { return v.Host }

// GetPort returns SyslogIntegrationInput.Port, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetPort() string { return v.Port }

// GetMode returns SyslogIntegrationInput.Mode, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetMode() string { return v.Mode }

type VolumeInput struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns VolumeInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetMountPath() string { return v.MountPath }

// GetSize returns VolumeInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetSize() int { return v.Size }

// __createAppGitInput is used internally by genqlient
type __createAppGitInput struct {
	Input *CreateProjectGitInput `json:"input,omitempty"`
}

// GetInput returns __createAppGitInput.Input, and is useful for accessing the field via an interface.
func (v *__createAppGitInput) GetInput() *CreateProjectGitInput { return v.Input }

// __createEnvironmentInput is used internally by genqlient
type __createEnvironmentInput struct {
	ProjectID string `json:"projectID"`
	Name      string `json:"name"`
}

// GetProjectID returns __createEnvironmentInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetProjectID() string { return v.ProjectID }

// GetName returns __createEnvironmentInput.Name, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetName() string { return v.Name }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	UserID string `json:"userID"`
	Name   string `json:"name"`
}

// GetUserID returns __createProjectInput.UserID, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetUserID() string { return v.UserID }

// GetName returns __createProjectInput.Name, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetName() string { return v.Name }

// __getProjectByIDInput is used internally by genqlient
type __getProjectByIDInput struct {
	ProjectID string `json:"projectID"`
}

// GetProjectID returns __getProjectByIDInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__getProjectByIDInput) GetProjectID() string { return v.ProjectID }

// createAppGitCreateProjectGitRepo includes the requested fields of the GraphQL type Repo.
type createAppGitCreateProjectGitRepo struct {
	Id        string                                        `json:"id"`
	Name      string                                        `json:"name"`
	Envs      []*createAppGitCreateProjectGitRepoEnvsEnvVar `json:"envs"`
	Cpu       *string                                       `json:"cpu"`
	Memory    *string                                       `json:"memory"`
	UpdatedAt time.Time                                     `json:"updatedAt"`
}

// GetId returns createAppGitCreateProjectGitRepo.Id, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetId() string { return v.Id }

// GetName returns createAppGitCreateProjectGitRepo.Name, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetName() string { return v.Name }

// GetEnvs returns createAppGitCreateProjectGitRepo.Envs, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetEnvs() []*createAppGitCreateProjectGitRepoEnvsEnvVar {
	return v.Envs
}

// GetCpu returns createAppGitCreateProjectGitRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetCpu() *string { return v.Cpu }

// GetMemory returns createAppGitCreateProjectGitRepo.Memory, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetMemory() *string { return v.Memory }

// GetUpdatedAt returns createAppGitCreateProjectGitRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepo) GetUpdatedAt() time.Time { return v.UpdatedAt }

// createAppGitCreateProjectGitRepoEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type createAppGitCreateProjectGitRepoEnvsEnvVar struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetId returns createAppGitCreateProjectGitRepoEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepoEnvsEnvVar) GetId() string { return v.Id }

// GetName returns createAppGitCreateProjectGitRepoEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepoEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns createAppGitCreateProjectGitRepoEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *createAppGitCreateProjectGitRepoEnvsEnvVar) GetValue() string { return v.Value }

// createAppGitResponse is returned by createAppGit on success.
type createAppGitResponse struct {
	CreateProjectGit *createAppGitCreateProjectGitRepo `json:"createProjectGit"`
}

// GetCreateProjectGit returns createAppGitResponse.CreateProjectGit, and is useful for accessing the field via an interface.
func (v *createAppGitResponse) GetCreateProjectGit() *createAppGitCreateProjectGitRepo {
	return v.CreateProjectGit
}

// createEnvironmentCreateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type createEnvironmentCreateProjectEnvironment struct {
	Id        string                                            `json:"id"`
	Name      string                                            `json:"name"`
	Project   *createEnvironmentCreateProjectEnvironmentProject `json:"project"`
	UpdatedAt time.Time                                         `json:"updatedAt"`
}

// GetId returns createEnvironmentCreateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetId() string { return v.Id }

// GetName returns createEnvironmentCreateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetName() string { return v.Name }

// GetProject returns createEnvironmentCreateProjectEnvironment.Project, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetProject() *createEnvironmentCreateProjectEnvironmentProject {
	return v.Project
}

// GetUpdatedAt returns createEnvironmentCreateProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// createEnvironmentCreateProjectEnvironmentProject includes the requested fields of the GraphQL type Project.
type createEnvironmentCreateProjectEnvironmentProject struct {
	Id string `json:"id"`
}

// GetId returns createEnvironmentCreateProjectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *createEnvironmentCreateProjectEnvironmentProject) GetId() string { return v.Id }

// createEnvironmentResponse is returned by createEnvironment on success.
type createEnvironmentResponse struct {
	CreateProjectEnvironment *createEnvironmentCreateProjectEnvironment `json:"createProjectEnvironment"`
}

// GetCreateProjectEnvironment returns createEnvironmentResponse.CreateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createEnvironmentResponse) GetCreateProjectEnvironment() *createEnvironmentCreateProjectEnvironment {
	return v.CreateProjectEnvironment
}

// createProjectCreateProjectV2Project includes the requested fields of the GraphQL type Project.
type createProjectCreateProjectV2Project struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns createProjectCreateProjectV2Project.Id, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetId() string { return v.Id }

// GetName returns createProjectCreateProjectV2Project.Name, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetName() string { return v.Name }

// GetUpdatedAt returns createProjectCreateProjectV2Project.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectV2Project) GetUpdatedAt() time.Time { return v.UpdatedAt }

// createProjectResponse is returned by createProject on success.
type createProjectResponse struct {
	CreateProjectV2 *createProjectCreateProjectV2Project `json:"createProjectV2"`
}

// GetCreateProjectV2 returns createProjectResponse.CreateProjectV2, and is useful for accessing the field via an interface.
func (v *createProjectResponse) GetCreateProjectV2() *createProjectCreateProjectV2Project {
	return v.CreateProjectV2
}

// currentUserIDCurrentUser includes the requested fields of the GraphQL type User.
type currentUserIDCurrentUser struct {
	Id string `json:"id"`
}

// GetId returns currentUserIDCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *currentUserIDCurrentUser) GetId() string { return v.Id }

// currentUserIDResponse is returned by currentUserID on success.
type currentUserIDResponse struct {
	CurrentUser *currentUserIDCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns currentUserIDResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *currentUserIDResponse) GetCurrentUser() *currentUserIDCurrentUser { return v.CurrentUser }

// getProjectByIDProject includes the requested fields of the GraphQL type Project.
type getProjectByIDProject struct {
	Id           string                                                 `json:"id"`
	Name         string                                                 `json:"name"`
	UpdatedAt    time.Time                                              `json:"updatedAt"`
	Environments []*getProjectByIDProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns getProjectByIDProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetId() string { return v.Id }

// GetName returns getProjectByIDProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetName() string { return v.Name }

// GetUpdatedAt returns getProjectByIDProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetEnvironments returns getProjectByIDProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectByIDProject) GetEnvironments() []*getProjectByIDProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// getProjectByIDProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type getProjectByIDProjectEnvironmentsProjectEnvironment struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns getProjectByIDProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIDProjectEnvironmentsProjectEnvironment) GetId() string { return v.Id }

// GetName returns getProjectByIDProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getProjectByIDProjectEnvironmentsProjectEnvironment) GetName() string { return v.Name }

// GetUpdatedAt returns getProjectByIDProjectEnvironmentsProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectByIDProjectEnvironmentsProjectEnvironment) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// getProjectByIDResponse is returned by getProjectByID on success.
type getProjectByIDResponse struct {
	Project *getProjectByIDProject `json:"project"`
}

// GetProject returns getProjectByIDResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIDResponse) GetProject() *getProjectByIDProject { return v.Project }

// Used to create Zeet "Repos", aka "Apps"
// ProjectID and EnvironmentID are expected to be specified
func createAppGit(
	ctx context.Context,
	client graphql.Client,
	input *CreateProjectGitInput,
) (*createAppGitResponse, error) {
	req := &graphql.Request{
		OpName: "createAppGit",
		Query: `
mutation createAppGit ($input: CreateProjectGitInput!) {
	createProjectGit(input: $input) {
		id
		name
		envs {
			id
			name
			value
		}
		cpu
		memory
		updatedAt
	}
}
`,
		Variables: &__createAppGitInput{
			Input: input,
		},
	}
	var err error

	var data createAppGitResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createEnvironment(
	ctx context.Context,
	client graphql.Client,
	projectID string,
	name string,
) (*createEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "createEnvironment",
		Query: `
mutation createEnvironment ($projectID: UUID!, $name: String!) {
	createProjectEnvironment(input: {projectID:$projectID,name:$name}) {
		id
		name
		project {
			id
		}
		updatedAt
	}
}
`,
		Variables: &__createEnvironmentInput{
			ProjectID: projectID,
			Name:      name,
		},
	}
	var err error

	var data createEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createProject(
	ctx context.Context,
	client graphql.Client,
	userID string,
	name string,
) (*createProjectResponse, error) {
	req := &graphql.Request{
		OpName: "createProject",
		Query: `
mutation createProject ($userID: UUID!, $name: String!) {
	createProjectV2(input: {userID:$userID,name:$name}) {
		id
		name
		updatedAt
	}
}
`,
		Variables: &__createProjectInput{
			UserID: userID,
			Name:   name,
		},
	}
	var err error

	var data createProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func currentUserID(
	ctx context.Context,
	client graphql.Client,
) (*currentUserIDResponse, error) {
	req := &graphql.Request{
		OpName: "currentUserID",
		Query: `
query currentUserID {
	currentUser {
		id
	}
}
`,
	}
	var err error

	var data currentUserIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectByID(
	ctx context.Context,
	client graphql.Client,
	projectID string,
) (*getProjectByIDResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectByID",
		Query: `
query getProjectByID ($projectID: UUID!) {
	project(id: $projectID) {
		id
		name
		updatedAt
		environments {
			id
			name
			updatedAt
		}
	}
}
`,
		Variables: &__getProjectByIDInput{
			ProjectID: projectID,
		},
	}
	var err error

	var data getProjectByIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
