// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zeet-dev/pulumi-zeet-native/sdk/go/zeetnative/model"
	"github.com/zeet-dev/pulumi-zeet-native/sdk/go/zeetnative/time"
)

type App struct {
	pulumi.CustomResourceState

	AppId         pulumi.StringOutput                 `pulumi:"appId"`
	Build         model.CreateAppBuildInputOutput     `pulumi:"build"`
	Deploy        model.CreateAppDeployInputOutput    `pulumi:"deploy"`
	Enabled       pulumi.BoolOutput                   `pulumi:"enabled"`
	EnvironmentId pulumi.StringOutput                 `pulumi:"environmentId"`
	Github        model.CreateAppGithubInputPtrOutput `pulumi:"github"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	ProjectId     pulumi.StringOutput                 `pulumi:"projectId"`
	Resources     model.CreateAppResourcesInputOutput `pulumi:"resources"`
	UpdatedAt     time.TimeOutput                     `pulumi:"updatedAt"`
	UserId        pulumi.StringOutput                 `pulumi:"userId"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Build == nil {
		return nil, errors.New("invalid value for required argument 'Build'")
	}
	if args.Deploy == nil {
		return nil, errors.New("invalid value for required argument 'Deploy'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource App
	err := ctx.RegisterResource("zeet-native:resources:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("zeet-native:resources:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
}

type AppState struct {
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	Build         model.CreateAppBuildInput     `pulumi:"build"`
	Deploy        model.CreateAppDeployInput    `pulumi:"deploy"`
	Enabled       bool                          `pulumi:"enabled"`
	EnvironmentId string                        `pulumi:"environmentId"`
	Github        *model.CreateAppGithubInput   `pulumi:"github"`
	Name          string                        `pulumi:"name"`
	ProjectId     string                        `pulumi:"projectId"`
	Resources     model.CreateAppResourcesInput `pulumi:"resources"`
	UserId        string                        `pulumi:"userId"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	Build         model.CreateAppBuildInputInput
	Deploy        model.CreateAppDeployInputInput
	Enabled       pulumi.BoolInput
	EnvironmentId pulumi.StringInput
	Github        model.CreateAppGithubInputPtrInput
	Name          pulumi.StringInput
	ProjectId     pulumi.StringInput
	Resources     model.CreateAppResourcesInputInput
	UserId        pulumi.StringInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

func (o AppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o AppOutput) Build() model.CreateAppBuildInputOutput {
	return o.ApplyT(func(v *App) model.CreateAppBuildInputOutput { return v.Build }).(model.CreateAppBuildInputOutput)
}

func (o AppOutput) Deploy() model.CreateAppDeployInputOutput {
	return o.ApplyT(func(v *App) model.CreateAppDeployInputOutput { return v.Deploy }).(model.CreateAppDeployInputOutput)
}

func (o AppOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *App) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o AppOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

func (o AppOutput) Github() model.CreateAppGithubInputPtrOutput {
	return o.ApplyT(func(v *App) model.CreateAppGithubInputPtrOutput { return v.Github }).(model.CreateAppGithubInputPtrOutput)
}

func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o AppOutput) Resources() model.CreateAppResourcesInputOutput {
	return o.ApplyT(func(v *App) model.CreateAppResourcesInputOutput { return v.Resources }).(model.CreateAppResourcesInputOutput)
}

func (o AppOutput) UpdatedAt() time.TimeOutput {
	return o.ApplyT(func(v *App) time.TimeOutput { return v.UpdatedAt }).(time.TimeOutput)
}

func (o AppOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterOutputType(AppOutput{})
}
