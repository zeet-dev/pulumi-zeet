# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import model as _model
from .. import time as _time

__all__ = ['AppArgs', 'App']

@pulumi.input_type
class AppArgs:
    def __init__(__self__, *,
                 deploy: pulumi.Input['_model.CreateAppDeployInputArgs'],
                 enabled: pulumi.Input[bool],
                 environment_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 resources: pulumi.Input['_model.CreateAppResourcesInputArgs'],
                 user_id: pulumi.Input[str],
                 build: Optional[pulumi.Input['_model.CreateAppBuildInputArgs']] = None,
                 docker: Optional[pulumi.Input['_model.CreateAppDockerInputArgs']] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['_model.CreateAppEnvironmentVariableInputArgs']]]] = None,
                 github: Optional[pulumi.Input['_model.CreateAppGithubInputArgs']] = None):
        """
        The set of arguments for constructing a App resource.
        """
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "user_id", user_id)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if github is not None:
            pulumi.set(__self__, "github", github)

    @property
    @pulumi.getter
    def deploy(self) -> pulumi.Input['_model.CreateAppDeployInputArgs']:
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: pulumi.Input['_model.CreateAppDeployInputArgs']):
        pulumi.set(self, "deploy", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['_model.CreateAppResourcesInputArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['_model.CreateAppResourcesInputArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input['_model.CreateAppBuildInputArgs']]:
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input['_model.CreateAppBuildInputArgs']]):
        pulumi.set(self, "build", value)

    @property
    @pulumi.getter
    def docker(self) -> Optional[pulumi.Input['_model.CreateAppDockerInputArgs']]:
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: Optional[pulumi.Input['_model.CreateAppDockerInputArgs']]):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_model.CreateAppEnvironmentVariableInputArgs']]]]:
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_model.CreateAppEnvironmentVariableInputArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['_model.CreateAppGithubInputArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['_model.CreateAppGithubInputArgs']]):
        pulumi.set(self, "github", value)


class App(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 build: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppBuildInputArgs']]] = None,
                 deploy: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppDeployInputArgs']]] = None,
                 docker: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppDockerInputArgs']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_model.CreateAppEnvironmentVariableInputArgs']]]]] = None,
                 github: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppGithubInputArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppResourcesInputArgs']]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 build: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppBuildInputArgs']]] = None,
                 deploy: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppDeployInputArgs']]] = None,
                 docker: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppDockerInputArgs']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_model.CreateAppEnvironmentVariableInputArgs']]]]] = None,
                 github: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppGithubInputArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['_model.CreateAppResourcesInputArgs']]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppArgs.__new__(AppArgs)

            __props__.__dict__["build"] = build
            if deploy is None and not opts.urn:
                raise TypeError("Missing required property 'deploy'")
            __props__.__dict__["deploy"] = deploy
            __props__.__dict__["docker"] = docker
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["environment_variables"] = environment_variables
            __props__.__dict__["github"] = github
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["app_id"] = None
            __props__.__dict__["updated_at"] = None
        super(App, __self__).__init__(
            'zeet-native:resources:App',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'App':
        """
        Get an existing App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AppArgs.__new__(AppArgs)

        __props__.__dict__["app_id"] = None
        __props__.__dict__["build"] = None
        __props__.__dict__["deploy"] = None
        __props__.__dict__["docker"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["environment_id"] = None
        __props__.__dict__["environment_variables"] = None
        __props__.__dict__["github"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project_id"] = None
        __props__.__dict__["resources"] = None
        __props__.__dict__["updated_at"] = None
        __props__.__dict__["user_id"] = None
        return App(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def build(self) -> pulumi.Output[Optional['_model.outputs.CreateAppBuildInput']]:
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def deploy(self) -> pulumi.Output['_model.outputs.CreateAppDeployInput']:
        return pulumi.get(self, "deploy")

    @property
    @pulumi.getter
    def docker(self) -> pulumi.Output[Optional['_model.outputs.CreateAppDockerInput']]:
        return pulumi.get(self, "docker")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Sequence['_model.outputs.CreateAppEnvironmentVariableInput']]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def github(self) -> pulumi.Output[Optional['_model.outputs.CreateAppGithubInput']]:
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output['_model.outputs.CreateAppResourcesInput']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output['_time.outputs.Time']:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_id")

